<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>[论文复现] Poisson Image Editing</title>
    <link href="/2025/01/29/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0-%E6%B3%8A%E6%9D%BE%E5%9B%BE%E5%83%8F%E7%BC%96%E8%BE%91/"/>
    <url>/2025/01/29/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0-%E6%B3%8A%E6%9D%BE%E5%9B%BE%E5%83%8F%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>这篇论文（Poisson image editing）主要解决的是图像编辑的局部变化问题，比如说图像的无缝融合。之前的一些方法会导致图像的边缘出现接缝，即使用羽化的方法处理，也无法完全解决。</p><p>这篇文章提出的是一种通用机制，基于这种机制可以实现无缝图像克隆（Seamless Cloning）和选区编辑（Selection Editing）等功能。</p><h2 id="原理">原理</h2><p>人眼对于二阶变化（如边缘）敏感，而对于一阶的梯度（比如光照、阴影的变化）不敏感。拉普拉斯算子进行了二阶导，光照、阴影这类缓慢的梯度可以近似看成线性函数，二阶导接近 0，这就会导致拉普拉斯算子处理后缓慢梯度被抑制，不过看着不明显。而对于高频变化，如边缘，经过拉普拉斯算子处理，会保留下来，依据拉普拉斯算子处理后的结果进行计算可以尽可能保留这些特征，以此达成“看起来差不多”的效果。</p><p><img src="https://bu.dusays.com/2025/01/31/679c855833619.webp" alt="Guided interpolation notations"></p><p>假设我们有一张源图像，一张目标图像，从源图像上切下来一块区域，移到目标图像上进行融合，那么可以这样看待下面几个符号：</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi mathvariant="double-struck">R</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\R^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathbb">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 上的闭集，可以代表目标区域</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 上的子集，也就是要融合的区域</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\partial \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">Ω</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span> 区域的边缘，即融合的区域的边缘</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">f^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>：定义在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 去掉 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span> 的区域上的标量函数，可以看成源图像未融合部分的像素值。由于我们可以对图像的 RGB 三个分量分别处理，所以这里直接当作标量函数了</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span> 是定义在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span> 上的标量函数，也就是我们要求的图像部分</li></ul><p>如果这是一个插值问题，最简单的插值方法是看作这样的最小化问题：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mrow><mi>min</mi><mo>⁡</mo></mrow><mi>f</mi></munder><msub><mo>∬</mo><mi mathvariant="normal">Ω</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><mi>f</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mspace width="1em"/><mtext>且</mtext><mspace width="1em"/><mi>f</mi><msub><mi mathvariant="normal">∣</mi><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></msub><mo>=</mo><msup><mi>f</mi><mo>∗</mo></msup><msub><mi mathvariant="normal">∣</mi><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\min_f \iint_{\Omega} |\nabla f|^2 \quad \text{且} \quad f|_{\partial \Omega} = f^*|_{\partial \Omega}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2717em;vertical-align:-0.9117em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-2.3479em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8882em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.001em;">∬</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4334em;"><span style="top:-1.7883em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9117em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣∇</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord cjk_fallback">且</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>这叫做膜插值，可以让边缘连贯，同时确保内部平滑。这或许能用来修复背景，但跟我们要做的图像融合没啥关系。我们需要对内部的插值做额外的约束，为此引入了一个引导场 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>，将问题转化为：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mrow><mi>min</mi><mo>⁡</mo></mrow><mi>f</mi></munder><msub><mo>∬</mo><mi mathvariant="normal">Ω</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><mi>f</mi><mo>−</mo><mi mathvariant="bold">v</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mspace width="1em"/><mtext>且</mtext><mspace width="1em"/><mi>f</mi><msub><mi mathvariant="normal">∣</mi><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></msub><mo>=</mo><msup><mi>f</mi><mo>∗</mo></msup><msub><mi mathvariant="normal">∣</mi><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\min_f \iint_{\Omega} |\nabla f - \mathbf{v}|^2 \quad \text{且} \quad f|_{\partial \Omega} = f^*|_{\partial \Omega}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2717em;vertical-align:-0.9117em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-2.3479em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8882em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.001em;">∬</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.4334em;"><span style="top:-1.7883em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9117em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣∇</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord text"><span class="mord cjk_fallback">且</span></span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>即让插值区域的梯度尽可能接近引导场 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>，且边缘连续。引导场 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span> 可能就是源图像的梯度，也可能不是。</p><p>这个问题的解又满足：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">Δ</mi><mi>f</mi><mo>=</mo><mtext>div</mtext><mtext> </mtext><mi mathvariant="bold">v</mi><mtext> over </mtext><mi mathvariant="normal">Ω</mi><mtext> 且 </mtext><mi>f</mi><msub><mi mathvariant="normal">∣</mi><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></msub><mo>=</mo><msup><mi>f</mi><mo>∗</mo></msup><msub><mi mathvariant="normal">∣</mi><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\Delta f = \text{div} \, \mathbf{v} \text{ over } \Omega \text{ 且 } f|_{\partial \Omega} = f^*|_{\partial \Omega}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">Δ</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">div</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="mord text"><span class="mord"> over </span></span><span class="mord">Ω</span><span class="mord text"><span class="mord"> </span><span class="mord cjk_fallback">且</span><span class="mord"> </span></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>由第一段的分析，我们更加确信转化成这样的最小化问题是合理的。</p><p>对于图像编辑的问题，我们需要离散地进行求解。直接对上面这个方程离散，不好计算，所以还是选择原本的方程进行离散：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mrow><mi>min</mi><mo>⁡</mo></mrow><mrow><mi>f</mi><msub><mo>∣</mo><mi mathvariant="normal">Ω</mi></msub></mrow></munder><munder><mo>∑</mo><mrow><mo stretchy="false">⟨</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">⟩</mo><mo>∩</mo><mi mathvariant="normal">Ω</mi><mo mathvariant="normal">≠</mo><mi mathvariant="normal">∅</mi></mrow></munder><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>f</mi><mi>p</mi></msub><mo>−</mo><msub><mi>f</mi><mi>q</mi></msub><mo stretchy="false">)</mo><mo>−</mo><msub><mi>v</mi><mrow><mi>p</mi><mi>q</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo separator="true">,</mo><mtext> with </mtext><msub><mi>f</mi><mi>p</mi></msub><mo>=</mo><msubsup><mi>f</mi><mi>p</mi><mo>∗</mo></msubsup><mo separator="true">,</mo><mtext> for all </mtext><mi>p</mi><mo>∈</mo><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\min_{f \mid_{\Omega}} \sum_{\langle p,q \rangle \cap \Omega \neq \emptyset} ((f_p - f_q) - v_{pq})^2, \text{ with } f_p = f_p^*, \text{ for all } p \in \partial \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.566em;vertical-align:-1.516em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6679em;"><span style="top:-2.309em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mrel mtight"><span class="mrel mtight">∣</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3567em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">Ω</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1433em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop">min</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.966em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.809em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">⟨</span><span class="mord mathnormal mtight">p</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mclose mtight">⟩</span><span class="mbin mtight">∩</span><span class="mord mtight">Ω</span><span class="mrel mtight"><span class="mrel mtight"><span class="mord vbox mtight"><span class="thinbox mtight"><span class="rlap mtight"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord mtight"><span class="mrel mtight"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel mtight">=</span></span><span class="mord mtight">∅</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516em;"><span></span></span></span></span></span><span class="mopen">((</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1502em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord"> with </span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1218em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord text"><span class="mord"> for all </span></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">Ω</span></span></span></span></span></p><p>其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⟨</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">⟩</mo></mrow><annotation encoding="application/x-tex">\langle p,q \rangle</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⟨</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">⟩</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span> 的上下左右四个方向的像素之一，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mrow><mi>p</mi><mi>q</mi></mrow></msub></mrow><annotation encoding="application/x-tex">v_{pq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo separator="true">,</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">p, q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> 中点处的引导向量场在 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">pq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span></span></span></span> 方向的投影，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>v</mi><mrow><mi>p</mi><mi>q</mi></mrow></msub><mo>=</mo><mi mathvariant="bold">v</mi><mrow><mo fence="true">(</mo><mfrac><mrow><mi>p</mi><mo>+</mo><mi>q</mi></mrow><mn>2</mn></mfrac><mo fence="true">)</mo></mrow><mo>⋅</mo><mover accent="true"><mrow><mi>p</mi><mi>q</mi></mrow><mo stretchy="true">→</mo></mover></mrow><annotation encoding="application/x-tex">v_{pq} = \mathbf{v}\left(\frac{p+q}{2}\right) \cdot \overrightarrow{pq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2044em;vertical-align:-0.35em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8544em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4461em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.147em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9526em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">pq</span></span></span><span class="svg-align" style="top:-3.4306em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg xmlns="http://www.w3.org/2000/svg" width="400em" height="0.522em" viewBox="0 0 400000 522" preserveAspectRatio="xMaxYMin slice"><path d="M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67 151.7 139 205zm0 0v40h399900v-40z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span>。</p><p>这个式子把梯度近似成相邻像素的差，在引导向量场上离散取点并做投影来实现离散化。</p><p>求解离散的最小化能量，令偏导等于 0（这个平方和是凸函数，偏导为 0 的点就是最值点）：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mi mathvariant="normal">∂</mi><mrow><mi mathvariant="normal">∂</mi><msub><mi>f</mi><mi>p</mi></msub></mrow></mfrac><mrow><mo fence="true">(</mo><munder><mo>∑</mo><mrow><mo stretchy="false">⟨</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">⟩</mo></mrow></munder><mo stretchy="false">(</mo><msub><mi>f</mi><mi>p</mi></msub><mo>−</mo><msub><mi>f</mi><mi>q</mi></msub><mo>−</mo><msub><mi>v</mi><mrow><mi>p</mi><mi>q</mi></mrow></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo fence="true">)</mo></mrow><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial}{\partial f_p} \left( \sum_{\langle p,q \rangle} (f_p - f_q - v_{pq})^2 \right) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="3.600em" viewBox="0 0 875 3600"><path d="M863,9c0,-2,-2,-5,-6,-9c0,0,-17,0,-17,0c-12.7,0,-19.3,0.3,-20,1c-5.3,5.3,-10.3,11,-15,17c-242.7,294.7,-395.3,682,-458,1162c-21.3,163.3,-33.3,349,-36,557 l0,84c0.2,6,0,26,0,60c2,159.3,10,310.7,24,454c53.3,528,210,949.7,470,1265c4.7,6,9.7,11.7,15,17c0.7,0.7,7,1,19,1c0,0,18,0,18,0c4,-4,6,-7,6,-9c0,-2.7,-3.3,-8.7,-10,-18c-135.3,-192.7,-235.5,-414.3,-300.5,-665c-65,-250.7,-102.5,-544.7,-112.5,-882c-2,-104,-3,-167,-3,-189l0,-92c0,-162.7,5.7,-314,17,-454c20.7,-272,63.7,-513,129,-723c65.3,-210,155.3,-396.3,270,-559c6.7,-9.3,10,-15.3,10,-18z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.809em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">⟨</span><span class="mord mathnormal mtight">p</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mclose mtight">⟩</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.516em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.05em;"><span class="pstrut" style="height:5.6em;"></span><span style="width:0.875em;height:3.600em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.875em" height="3.600em" viewBox="0 0 875 3600"><path d="M76,0c-16.7,0,-25,3,-25,9c0,2,2,6.3,6,13c21.3,28.7,42.3,60.3,63,95c96.7,156.7,172.8,332.5,228.5,527.5c55.7,195,92.8,416.5,111.5,664.5c11.3,139.3,17,290.7,17,454c0,28,1.7,43,3.3,45l0,9c-3,4,-3.3,16.7,-3.3,38c0,162,-5.7,313.7,-17,455c-18.7,248,-55.8,469.3,-111.5,664c-55.7,194.7,-131.8,370.3,-228.5,527c-20.7,34.7,-41.7,66.3,-63,95c-2,3.3,-4,7,-6,11c0,7.3,5.7,11,17,11c0,0,11,0,11,0c9.3,0,14.3,-0.3,15,-1c5.3,-5.3,10.3,-11,15,-17c242.7,-294.7,395.3,-681.7,458,-1161c21.3,-164.7,33.3,-350.7,36,-558l0,-144c-2,-159.3,-10,-310.7,-24,-454c-53.3,-528,-210,-949.7,-470,-1265c-4.7,-6,-9.7,-11.7,-15,-17c-0.7,-0.7,-6.7,-1,-18,-1z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>注意如果靠近 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span> 的边缘时，相邻像素不一定是 4 个。而对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\partial \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord">Ω</span></span></span></span> 上的点，满足 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>f</mi><mi>q</mi><mo>∗</mo></msubsup><mo>=</mo><msub><mi>f</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">f^*_q = f_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0775em;vertical-align:-0.3831em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>，所以有：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mrow><mi>q</mi><mo>∈</mo><msub><mi>N</mi><mi>p</mi></msub></mrow></munder><mn>2</mn><mo stretchy="false">(</mo><msub><mi>f</mi><mi>p</mi></msub><mo>−</mo><msub><mi>f</mi><mi>q</mi></msub><mo>−</mo><msub><mi>v</mi><mrow><mi>p</mi><mi>q</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mo>⇒</mo><mi mathvariant="normal">∣</mi><msub><mi>N</mi><mi>p</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>f</mi><mi>p</mi></msub><mo>−</mo><munder><mo>∑</mo><mrow><mi>q</mi><mo>∈</mo><msub><mi>N</mi><mi>p</mi></msub><mo>∩</mo><mi mathvariant="normal">Ω</mi></mrow></munder><msub><mi>f</mi><mi>q</mi></msub><mo>=</mo><munder><mo>∑</mo><mrow><mi>q</mi><mo>∈</mo><msub><mi>N</mi><mi>p</mi></msub><mo>∩</mo><mi mathvariant="normal">∂</mi><mi mathvariant="normal">Ω</mi></mrow></munder><msubsup><mi>f</mi><mi>q</mi><mo>∗</mo></msubsup><mo>+</mo><munder><mo>∑</mo><mrow><mi>q</mi><mo>∈</mo><msub><mi>N</mi><mi>p</mi></msub></mrow></munder><msub><mi>v</mi><mrow><mi>p</mi><mi>q</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\sum_{q \in N_p} 2(f_p - f_q - v_{pq}) = 0 \Rightarrow |N_p| f_p - \sum_{q \in N_p \cap \Omega} f_q = \sum_{q \in N_p \cap \partial \Omega} f_q^* + \sum_{q \in N_p} v_{pq}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.5417em;vertical-align:-1.4917em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4917em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⇒</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.5417em;vertical-align:-1.4917em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span><span class="mbin mtight">∩</span><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4917em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.5494em;vertical-align:-1.4994em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span><span class="mbin mtight">∩</span><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mtight">Ω</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4994em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.5417em;vertical-align:-1.4917em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2819em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4917em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>这个方程就可以计算了。</p><h2 id="应用">应用</h2><h3 id="无缝图像克隆">无缝图像克隆</h3><p>无缝图像克隆（Seamless Cloning）就是指原理一节中的情况，将源图像融合到目标图像中。可以完成的任务有，往图片里增加内容，消除内容，以及改变纹理特征等。</p><p><img src="https://bu.dusays.com/2025/01/31/679c84b3ee813.webp" alt="Concealment"></p><p><img src="https://bu.dusays.com/2025/01/31/679c87fb755ad.jpg" alt="Insertion"></p><p><img src="https://bu.dusays.com/2025/01/31/679c88e07a950.jpg" alt="Feature exchange"></p><p>问题的关键是选取合适的引导向量场 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span></span></span></span>，最简单的做法是直接取源图像的梯度，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>v</mi><mo>=</mo><mi mathvariant="normal">∇</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">v = \nabla g</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>，</p><p>但对于某些情况，比如源图像有洞、透明，或是要插入的位置太过于靠近其他物体，就会导致模糊的情况，这个时候可以用混合梯度的方式来解决。</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>for all </mtext><mi mathvariant="bold">x</mi><mo>∈</mo><mi mathvariant="normal">Ω</mi><mo separator="true">,</mo><mi mathvariant="bold">v</mi><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><msup><mi>f</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><msup><mi>f</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∇</mi><mi>g</mi><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><mi>g</mi><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>otherwise.</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\text{for all } \mathbf{x} \in \Omega, \mathbf{v}(\mathbf{x}) =\begin{cases}\nabla f^*(\mathbf{x}) &amp; \text{if } |\nabla f^*(\mathbf{x})| &gt; |\nabla g(\mathbf{x})|, \\\nabla g(\mathbf{x}) &amp; \text{otherwise.}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord text"><span class="mord">for all </span></span><span class="mord mathbf">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">∇</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord">∣∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">∣∇</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span><span class="mord">∣</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">otherwise.</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>选取源图像和目标图像中梯度更大的来计算，可以避免一些模糊的情况。离散形式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>v</mi><mrow><mi>p</mi><mi>q</mi></mrow></msub><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mi>f</mi><mi>p</mi><mo>∗</mo></msubsup><mo>−</mo><msubsup><mi>f</mi><mi>q</mi><mo>∗</mo></msubsup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext>if </mtext><mi mathvariant="normal">∣</mi><msubsup><mi>f</mi><mi>p</mi><mo>∗</mo></msubsup><mo>−</mo><msubsup><mi>f</mi><mi>q</mi><mo>∗</mo></msubsup><mi mathvariant="normal">∣</mi><mo>&gt;</mo><mi mathvariant="normal">∣</mi><msub><mi>g</mi><mi>p</mi></msub><mo>−</mo><msub><mi>g</mi><mi>q</mi></msub><mi mathvariant="normal">∣</mi><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>g</mi><mi>p</mi></msub><mo>−</mo><msub><mi>g</mi><mi>q</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mtext>otherwise,</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">v_{pq} =\begin{cases}f_p^* - f_q^* &amp; \text{if } |f_p^* - f_q^*| &gt; |g_p - g_q|, \\g_p - g_q &amp; \text{otherwise,}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">pq</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">if </span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-2.453em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3831em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord">otherwise,</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><img src="https://bu.dusays.com/2025/01/31/679c969f8dfa7.jpg" alt="Inserting objects with holes"></p><p><img src="https://bu.dusays.com/2025/01/31/679c969f7afc3.jpg" alt="Inserting transparent objects"></p><p><img src="https://bu.dusays.com/2025/01/31/679c969f7121b.jpg" alt="Inserting one object close to another"></p><h3 id="选区编辑">选区编辑</h3><p>还可以借助这个框架完成一些局部的图像编辑功能，比如纹理扁平化，改变光照、颜色，以及纹理的无缝拼合等。</p><p>调整一下思路，把引导场换成处理后的图像梯度场，就能做到原地修改了。</p><p><img src="https://bu.dusays.com/2025/01/31/679c969f6e525.jpg" alt="Texture flattening"></p><p>比如可以用一个二值掩码来对梯度进行处理：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>for all </mtext><mi mathvariant="bold">x</mi><mo>∈</mo><mi mathvariant="normal">Ω</mi><mo separator="true">,</mo><mi mathvariant="bold">v</mi><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>M</mi><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∇</mi><msup><mi>f</mi><mo>∗</mo></msup><mo stretchy="false">(</mo><mi mathvariant="bold">x</mi><mo stretchy="false">)</mo><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">\text{for all } \mathbf{x} \in \Omega, \mathbf{v}(\mathbf{x}) = M(\mathbf{x}) \nabla f^*(\mathbf{x}),</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord text"><span class="mord">for all </span></span><span class="mord mathbf">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbf" style="margin-right:0.01597em;">v</span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span><span class="mord">∇</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7387em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathbf">x</span><span class="mclose">)</span><span class="mpunct">,</span></span></span></span></span></p><p>这里的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 可以取边缘检测器之类的函数，达成的效果就是纹理细节被弱化了，图像变得平滑。</p><p><img src="https://bu.dusays.com/2025/01/31/679c969f6a322.jpg" alt="Local illumination changes"></p><p><img src="https://bu.dusays.com/2025/01/31/679c969f5ecab.jpg" alt="Local color changes"></p><p>对局部颜色、亮度进行修改，按该方法，可以做到与其他物体的无缝接合。用户无需精确指定边界，就可以获得很好的过渡效果。</p><p><img src="https://bu.dusays.com/2025/01/31/679c969f91965.jpg" alt="Seamless tiling"></p><p>对于不能无缝拼接的纹理，可以把边缘作为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>f</mi><mo>∗</mo></msup></mrow><annotation encoding="application/x-tex">f^*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6887em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∗</span></span></span></span></span></span></span></span></span></span></span>，用这个方法来无缝拼接纹理。</p><h2 id="实现">实现</h2><p>这里主要完成的是第一类的应用——无缝图像克隆。</p><p>对于一般的点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> 来说，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn><msub><mi>f</mi><mi>q</mi></msub><mo>−</mo><msub><mi>f</mi><mtext>上</mtext></msub><mo>−</mo><msub><mi>f</mi><mtext>下</mtext></msub><mo>−</mo><msub><mi>f</mi><mtext>左</mtext></msub><mo>−</mo><msub><mi>f</mi><mtext>右</mtext></msub><mo>=</mo><mtext>右式</mtext></mrow><annotation encoding="application/x-tex">4f_q - f_上 - f_下 - f_左 - f_右 = 右式</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">上</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">下</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">左</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">右</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">右式</span></span></span></span>，对于每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo>∈</mo><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">q \in \Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span> 都可以列出一个方程，问题就转化成求解方程组了。</p><p>可以将解方程的问题转化成解 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>x</mi><mo>=</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">A x = b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 的方程组的问题，其中 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 是一个稀疏矩阵，包含方程组中每项的系数，而 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span> 是一个向量，包含每个点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> 的值。右侧的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">b</span></span></span></span> 对应方程右侧的值，与每个 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span> 对应。</p><p>求解有多种方法，比如共轭梯度法，多重网格法等。也可以简单地求 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">A^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，注意到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span> 是一个对称正定矩阵，可以用 LDLT 分解来解决。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>论文复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>论文复现</tag>
      
      <tag>图像处理</tag>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abseil 源码阅读笔记·容器 [0x02]</title>
    <link href="/2025/01/22/Abseil-0x02-%E5%AE%B9%E5%99%A8/"/>
    <url>/2025/01/22/Abseil-0x02-%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="FixedArray">FixedArray</h2><p>先从简单的开始，看一下 <a href="https://github.com/abseil/abseil-cpp/blob/lts_2024_07_22/absl/container/fixed_array.h">FixedArray</a>，学一点工程技巧。</p><p>注释里的介绍：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// A `FixedArray&lt;T&gt;` represents a non-resizable array of `T` where the length of</span><br><span class="hljs-comment">// the array can be determined at run-time. It is a good replacement for</span><br><span class="hljs-comment">// non-standard and deprecated uses of `alloca()` and variable length arrays</span><br><span class="hljs-comment">// within the GCC extension. (See</span><br><span class="hljs-comment">// https://gcc.gnu.org/onlinedocs/gcc/Variable-Length.html).</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// `FixedArray` allocates small arrays inline, keeping performance fast by</span><br><span class="hljs-comment">// avoiding heap operations. It also helps reduce the chances of</span><br><span class="hljs-comment">// accidentally overflowing your stack if large input is passed to</span><br><span class="hljs-comment">// your function.</span><br></code></pre></td></tr></table></figure><p>来看一下代码，起手一个命名空间 <code>absl</code>，紧跟一个宏 <code>ABSL_NAMESPACE_BEGIN</code>，展开后是 <code>inline namespace ABSL_OPTION_INLINE_NAMESPACE_NAME &#123;</code>，一个内联的命名空间，这是用来控制版本的，在外部使用时不需要指定内联命名空间的名字，但是在编译后是有相关的符号的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-type">size_t</span> N = kFixedArrayUseDefault,<br>          <span class="hljs-keyword">typename</span> A = std::allocator&lt;T&gt;&gt;<br></code></pre></td></tr></table></figure><p><code>FixedArray</code> 是一个模板类，有三个模板参数，<code>T</code> 代表类型，<code>N</code> 代表要内联的元素个数，<code>A</code> 是个 allocator。当 <code>N</code> 不指定时，会使用 <code>kFixedArrayUseDefault</code> 作为默认参数，而在上面已经定义了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">static</span> <span class="hljs-keyword">auto</span> kFixedArrayUseDefault = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">size_t</span>&gt;(<span class="hljs-number">-1</span>);<br></code></pre></td></tr></table></figure><p>这实际上是 <code>size_t</code> 的最大值，正常使用时不会想着要内联这么多的东西，由此可以判断使用者有没有指定一个 <code>N</code>，如果没有指定那就使用默认值（默认最多内联 256 bytes 的内容），如果指定了再用指定的元素个数 <code>N</code>。注释里也提到了，大多数情况不需要指定 <code>N</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> size_type inline_elements =<br>    (N == kFixedArrayUseDefault ? kInlineBytesDefault / <span class="hljs-built_in">sizeof</span>(value_type)<br>                                : <span class="hljs-built_in">static_cast</span>&lt;size_type&gt;(N));<br></code></pre></td></tr></table></figure><p>类的开头是一个断言，确保 <code>T</code> 不是 C 风格数组，或者大小已知。这是为了防止类似 <code>int []</code> 的东西被传进来，它的大小不确定，不能用于创建固定大小的 <code>FixedArray</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">size_t</span> kInlineBytesDefault = <span class="hljs-number">256</span>;<br><br><span class="hljs-keyword">using</span> AllocatorTraits = std::allocator_traits&lt;A&gt;;<br><span class="hljs-comment">// std::iterator_traits isn&#x27;t guaranteed to be SFINAE-friendly until C++17,</span><br><span class="hljs-comment">// but this seems to be mostly pedantic.</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> Iterator&gt;<br><span class="hljs-keyword">using</span> EnableIfForwardIterator = absl::<span class="hljs-type">enable_if_t</span>&lt;std::is_convertible&lt;<br>    <span class="hljs-keyword">typename</span> std::iterator_traits&lt;Iterator&gt;::iterator_category,<br>    std::forward_iterator_tag&gt;::value&gt;;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-title">NoexceptCopyable</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> std::is_nothrow_copy_constructible&lt;StorageElement&gt;::value &amp;&amp;<br>        absl::allocator_is_nothrow&lt;allocator_type&gt;::value;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-title">NoexceptMovable</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> std::is_nothrow_move_constructible&lt;StorageElement&gt;::value &amp;&amp;<br>        absl::allocator_is_nothrow&lt;allocator_type&gt;::value;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> <span class="hljs-title">DefaultConstructorIsNonTrivial</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> !absl::is_trivially_default_constructible&lt;StorageElement&gt;::value;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来定义了几个东西，一个是 <code>kInlineBytesDefault</code> 内联的默认最大大小，还有一个 <code>EnableIfForwardIterator</code>，似乎是出于工程上的妥协，就不去管它了，还有三个判断函数，功能也很显然。</p><p>后面又有一些 <code>using</code>，具体见代码，就不再赘述了。</p><p>这类有一大堆构造函数之类的，也不详细讲了。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>源码阅读</category>
      
      <category>Abseil</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>C++</tag>
      
      <tag>源码阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abseil 源码阅读笔记·总览 [0x01]</title>
    <link href="/2025/01/22/Abseil-0x01-%E6%80%BB%E8%A7%88/"/>
    <url>/2025/01/22/Abseil-0x01-%E6%80%BB%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>按照官网的介绍，Abseil 实际上是一组开源代码的集合，使用的是 C++14 标准，是 C++ 标准库的补充，这个库在 Google 的开源项目中应用广泛，经过了生产环境的检验。</p><p>Abseil 主要有以下优点：</p><ol><li>兼容较新的 C++ 标准。这个库虽然是用的 C++14，但是实现了一些高版本的特性，并且确保了有相同的 API，比如 <code>string_view</code>，直接使用 <code>absl::string_view</code>，在高版本会使用 <code>std::string_view</code>，而在低版本会用 Abseil 库。这可以为旧代码引入新的特性。</li><li>兼容 Google 的开源项目。</li><li>保证了一直使用最新版本也不会出现兼容问题（只要遵循兼容性指南）。</li><li>经过生产环境的测试。</li><li>更加适用特定领域。C++ 标准库为了泛用，设计上会有一些考虑得“过于周到”的地方，而对于大多情况来说这些我们并不需要。</li></ol><h2 id="兼容指南">兼容指南</h2><ol><li>不要依赖内部细节。这点很好理解，封装就是为了隐藏内部细节，应当依赖公共 API.</li><li>使用什么就 include 什么。意思是不要指望 Abseil 内部的间接 include 来帮你引入想用的东西，因为里面会变。</li><li>不要依赖动态卸载。Abseil 库的设计不适用于动态加载和卸载。</li><li>不要打开命名空间 absl。就是说，不要自己往 absl 命名空间里面定义东西。</li><li>不要依赖于 Abseil API 的签名。不能通过地址或者元编程获取签名的方式来调用 Abseil API，还是一样的原因，会变。</li><li>不要前向声明 Abseil API。原因和上一点类似，函数签名也可能会变，比如往函数加个有默认值的参数。直接调函数，因为有默认值，不会有问题；但是如果前向声明里没添上参数，函数签名就会不匹配。</li><li>不要依赖 <a href="https://en.cppreference.com/w/cpp/language/adl">ADL</a>（参数依赖查找）。</li><li>不要在全局命名空间中不加限定地调用函数。这说的还是重复的问题。</li></ol><h2 id="总览">总览</h2><p>Abseil 库很贴心地给出了 Codemap，包含了这些东西：</p><ul><li>base：包含了一些初始化的代码和一些其他模块依赖的代码</li><li>algorithm：对 STL algorithm 的补充</li><li>container：STL 风格的容器</li><li>debugging：一些用来调试的代码，用于检查内存泄露、跟踪堆栈等</li><li>hash：哈希相关的东西</li><li>memory：增强版的 memory 库</li><li>meta：一些额外的类型检查功能（感觉有了 concept 之后似乎意义不大？）</li><li>numeric：128 位整型和 C++20 中的一些位运算函数</li><li>strings：包含一些字符串的处理函数，和 string_view 的兼容实现</li><li>synchronization：并行相关</li><li>time：时间库</li><li>types：非容器的一些类型，比如 optional 的兼容实现</li><li>utility：一些帮助代码</li></ul><p>Abseil 库遵循 Google 的代码风格，所以在代码里会尽可能不使用异常。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>源码阅读</category>
      
      <category>Abseil</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>C++</tag>
      
      <tag>源码阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Abseil 源码阅读笔记·序言 [0x00]</title>
    <link href="/2025/01/22/Abseil-0x00-%E5%BA%8F%E8%A8%80/"/>
    <url>/2025/01/22/Abseil-0x00-%E5%BA%8F%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="序言">序言</h2><p>之前读 Leveldb 代码的计划咕咕咕了，一个原因是没时间完整读下去了，另一个是它需要的前置知识比较多。这次我准备从一个较为零散的库开始，比较好控制节奏，抽空来完成。</p><p>本系列文章基于 Abseil LTS 20240722.0 版本。</p><h2 id="参考">参考</h2><ul><li><a href="https://abseil.io/">官网(https://abseil.io)</a></li></ul><h2 id="目录">目录</h2>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>源码阅读</category>
      
      <category>Abseil</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>C++</tag>
      
      <tag>源码阅读</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rCore 学习笔记 - 第二章</title>
    <link href="/2025/01/12/rCore-0x02/"/>
    <url>/2025/01/12/rCore-0x02/</url>
    
    <content type="html"><![CDATA[<h2 id="系统调用">系统调用</h2><p>rCore 的系统调用格式与 Linux 相同。第二章里首先实现了两个系统调用，<code>sys_write</code> 和 <code>sys_exit</code>，分别用于将数据写入文件和退出应用程序。通过 <code>syscall</code> 函数，按照规定的格式向特定寄存器存值，通过 <code>ecall</code> 触发 Trap，然后在内核中处理。</p><p>在用户程序中，可以发现 <code>console.rs</code> 有了些许不同，先前在内核中是借助了 RustSBI 来实现输出字符，而在这里是借助了系统调用，实际上系统调用在内核中被处理，最终还是借助了 RustSBI。</p><h2 id="构建脚本">构建脚本</h2><p>当前的系统是构建完用户代码，然后再将生成的 bin 文件以嵌入的方式，和内核一起构建的。这一步是借助构建脚本 <a href="http://build.rs">build.rs</a> 完成的，在文档中没有提及实现，这里我简单地看一下是如何完成的。</p><p>构建脚本将会监控两个目录是否发生变化：<code>../user/src/</code> 和 <code>../user/build/bin/</code>，如果发生变化就会生成相应代码，这是在 <code>insert_app_data</code> 函数中完成的。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">apps</span>: <span class="hljs-type">Vec</span>&lt;_&gt; = <span class="hljs-title function_ invoke__">read_dir</span>(<span class="hljs-string">&quot;../user/build/bin/&quot;</span>)<br>    .<span class="hljs-title function_ invoke__">unwrap</span>()<br>    .<span class="hljs-title function_ invoke__">into_iter</span>()<br>    .<span class="hljs-title function_ invoke__">map</span>(|dir_entry| &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">name_with_ext</span> = dir_entry.<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-title function_ invoke__">file_name</span>().<span class="hljs-title function_ invoke__">into_string</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>        name_with_ext.<span class="hljs-title function_ invoke__">drain</span>(name_with_ext.<span class="hljs-title function_ invoke__">find</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-title function_ invoke__">unwrap</span>()..name_with_ext.<span class="hljs-title function_ invoke__">len</span>());<br>        name_with_ext<br>    &#125;)<br>    .<span class="hljs-title function_ invoke__">collect</span>();<br></code></pre></td></tr></table></figure><p>关键在于这一步，先是读取了目录，然后进行 <code>unwrap</code>，如果失败会 panic，接着转为迭代器，再进行处理，最后收集到 <code>Vec</code> 中。处理的步骤先是获取文件名，转换成字符串，然后移除扩展名，返回结果。</p><p>所有用户程序按名称排序后开始生成 <code>link_app.S</code>，第一行 <code>.align 3</code> 指明按八字节对齐，这是由于后面 <code>.quad</code> 存储八字节数据的需要。</p><h2 id="执行流程">执行流程</h2><h2 id="作业实现">作业实现</h2>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>rCore</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>Rust</tag>
      
      <tag>rCore</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rCore 学习笔记 - 第一章</title>
    <link href="/2025/01/12/rCore-0x01/"/>
    <url>/2025/01/12/rCore-0x01/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>这些笔记的内容主要有两个：一个是记录下我实际操作过程中，遇到的和教程不一样的地方，并且记录下我的解决方法；二是记录写练习的过程。我不会重复记录手册里已经有的知识。</p><h2 id="环境">环境</h2><p>首先根据文档的指引配置好实验环境，我使用了 Windows + wsl2，但出于个人喜好，我没有使用 Ubuntu，而是用了 OpenSUSE Tumbleweed.</p><p>文档已经有一段时间没更新了，有些内容发生了些许变化，比如随着 rust 版本的更新，一些实验特性变成了稳定特性。我使用了最新版的 rust nightly，对于一些已经稳定的特性，就不加 <code>#![feature()]</code> 了。edition 我直接选了 2024，有一些东西发生了变化，比如 <code>extern</code>、<code>link_section</code> 和 <code>no_mangle</code> 都必须加 <code>unsafe</code> 了。</p><p>同时我使用了 Qemu 7.0.0 和最新版（Prereleased 2024-03-24）的 rustsbi-qemu.</p><p>在 OpenSUSE Tumbleweed中，我发现 gdb 似乎本来就有了切换架构到 risc-v 的功能，就没有折腾 riscv64-unknown-elf-gdb 了（这东西在 OpenSUSE Tumbleweed 下需要手动编译，非常麻烦）。</p><h2 id="在内核加载前">在内核加载前</h2><p>在控制权递交给内核前，经历了两个步骤，一个是从载入到跳转到 0x80000000，另一个是经过 RustSBI 的初始化，从 0x80000000 到 0x80200000 的内核处。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asm">0x1000: auipc   t0,0x0<br>0x1004: addi    a2,t0,40<br>0x1008: csrr    a0,mhartid<br>0x100c: ld      a1,32(t0)<br>0x1010: ld      t0,24(t0)<br>0x1014: jr      t0<br>0x1018: unimp<br>0x101a: .insn   2,0x8000<br>0x101c: unimp<br>0x101e: unimp<br></code></pre></td></tr></table></figure><p>可能是因为 Qemu 版本不一样，我自己用 gdb 调试的时候和文档不太一样，不过区别不大。</p><p>第一行 <code>auipc   t0,0x0</code> 实际上将 <code>pc</code> 的值，即 <code>0x1000</code> 赋值给了 <code>t0</code>，接下来三行似乎是对三个寄存器进行了赋值，暂时看不出来有什么用。关键的一行是 <code>0x1010</code> 这里，<code>t0 + 24</code> 得到的是 <code>0x1018</code>，这里有两个字节的 0，<code>ld</code> 将会加载一个 64 位的数据，也就是 8 个字节，由于采用小端序，所以 <code>0x1019</code> 是 <code>0x00</code>，<code>0x1020</code> 是 <code>0x80</code>，最后 <code>t0</code> 的值是 <code>0x0000_0000_8000_0000</code>，所以会跳转到 <code>0x80000000</code>。</p><p>到达 <code>0x8000000</code> 后就到了 RustSBI 的部分，进行了串口设备初始化等步骤后，再跳转到 <code>0x80200000</code>。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>rCore</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>Rust</tag>
      
      <tag>rCore</tag>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hackergame 2024 个人题解</title>
    <link href="/2024/11/13/Hackergame2024-WriteUp/"/>
    <url>/2024/11/13/Hackergame2024-WriteUp/</url>
    
    <content type="html"><![CDATA[<p>最终排名：校内第 10 名，总榜第 66 名。</p><h2 id="签到">签到</h2><p>下载各种输入法，多练习一下，应该就能输完了。<s>不会真有人这么做吧</s></p><p>不会打字，我还不能复制粘贴吗？抱歉，还真不行，在网页源代码中我们可以看到粘贴被禁用了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;input-box&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;zh&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;中文：启动&quot;</span> <span class="hljs-attr">onpaste</span>=<span class="hljs-string">&quot;return false&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>要想解决这一问题，可以用浏览器的调试工具把 <code>paste</code> 相关的内容全删了，这样就可以粘贴了。</p><h2 id="喜欢做签到的-CTFer-你们好呀">喜欢做签到的 CTFer 你们好呀</h2><p>首先要找到招新网站，其实玩意儿就在主页底下的承办单位里<s>不知道为啥这么多人找不到</s></p><p>打开招新主页发现是个终端一样的东西，提示我们可以输 <code>help</code> 看可用的命令。多试几个命令，发现输入 <code>env</code> 可以获取第一个 flag.</p><p>输入 <code>cat</code>，得到提示：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">file not found, maybe you can consider about Members / Awards / hidden files<br></code></pre></td></tr></table></figure><p>说明还有隐藏文件。尝试 <code>cd</code>，发现要 root，这个时候加上 <code>sudo</code>，恭喜获得奶龙（</p><p>输入 <code>ls -a</code> 可以显示隐藏文件，于是我们就能看到隐藏的 <code>.flag</code> 了，<code>cat .flag</code> 即可。</p><h2 id="猫咪问答">猫咪问答</h2><p>第 1、3、5 题可以简单地通过搜索得到答案；</p><p>第 2 题可以去往年题解的界面数题目个数，再到 LUG 官网找人数。<s>虽然这里说约 25 道题目，但好像都不止</s></p><p>第 4 题，找到 USENIX Security 2024 的网站，搜索中科大的英文名，可以找到这篇论文，然后可以在论文中找到组合的数量。（注意，不是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>16</mn><mo>×</mo><mn>20</mn></mrow><annotation encoding="application/x-tex">16 \times 20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">16</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span>）</p><p>第 6 题，你可以自己去下 Llama 3 70B 的完整模型，但是需要通过申请。在比赛的时候申请没过，这条路没走通。于是考虑直接搜索 tokenizer，找到了在线工具，把这一页 html 弄下来，用工具处理即可。</p><h2 id="打不开的盒">打不开的盒</h2><p>下载文件，用 Blender 导入，移动视角到盒子里就能看见了。</p><h2 id="每日论文太多了">每日论文太多了</h2><p>首先下载论文，这道题肯定不会让全看一遍的<s>不会真有人读了吧</s>，直接搜索 flag，可以看到 <code>flag here</code> 这几个和背景颜色一样的字。<s>我交了好多遍 flag{here}</s></p><p>仔细观察可以发现这边的有个框一样的东西，flag 应该是盖在底下了，用一些 PDF 编辑工具（比如福昕），可以把盖在上面的图片揭掉，这样就拿到 flag 了。</p><h2 id="比大小王">比大小王</h2><p><s>快来成为口算大师</s></p><p>可以看到我们的对手非常强大，做题飞快，我们肯定不能莽，要智取。</p><p>考虑修改 js 源码。刚开始我想的是直接 submit，但是服务器会校验答案是否正确，这一招不行；接下来考虑让对手赢不了，把时间限制改成 114514，但是服务器还是会校验，再次失败；因为服务器会校验，所以只能考虑在规定时间内做出正确答案，看到数据 fetch 之后存在本地，我打算在刷新的时候在代码里计算下一个结果，然后添加进 <code>inputs</code> 里，可惜这样做速度不够（从中我们可以推知，就算你手速再快也是赢不了的）。</p><p>其实在加载的时候所有数据都已经存进 <code>data</code> 里了，不需要等待刷新，直接读取 <code>data.values</code> 就行了。我怕太快又被服务器 ban 掉，所以只是添加了个作弊键：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (e.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowLeft&#x27;</span> || e.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;less-than&#x27;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;less-than&#x27;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>), <span class="hljs-number">200</span>);<br>    <span class="hljs-title function_">chooseAnswer</span>(<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;ArrowRight&#x27;</span> || e.<span class="hljs-property">key</span> === <span class="hljs-string">&#x27;d&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;greater-than&#x27;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;active&#x27;</span>);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;greater-than&#x27;</span>).<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;active&#x27;</span>), <span class="hljs-number">200</span>);<br>    <span class="hljs-title function_">chooseAnswer</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">0</span>] &lt; state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-title function_">chooseAnswer</span>(<span class="hljs-string">&#x27;&lt;&#x27;</span>);<br>        state.<span class="hljs-property">value1</span> = state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">0</span>];<br>        state.<span class="hljs-property">value2</span> = state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;value1&#x27;</span>).<span class="hljs-property">textContent</span> = state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">0</span>];<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;value2&#x27;</span>).<span class="hljs-property">textContent</span> = state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-title function_">updateCountdown</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">chooseAnswer</span>(<span class="hljs-string">&#x27;&gt;&#x27;</span>);<br>        state.<span class="hljs-property">value1</span> = state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">0</span>];<br>        state.<span class="hljs-property">value2</span> = state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;value1&#x27;</span>).<span class="hljs-property">textContent</span> = state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">0</span>];<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;value2&#x27;</span>).<span class="hljs-property">textContent</span> = state.<span class="hljs-property">values</span>[state.<span class="hljs-property">score1</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-title function_">updateCountdown</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后按任意键，等差不多了再自己做，这样就能获得 flag 了。</p><h2 id="旅行照片-4-0">旅行照片 4.0</h2><h3 id="第一题">第一题</h3><p>科大人从东区到中区应该都能看到那栋大厦，问题 1 送分。</p><p>问题二我尝试搜索 B 站看有没有标时间，但是只发现了录播。你可以从录播上传日期往前试，不用几次就能拿到 flag 了。当然，也可以直接去 Leo 官群翻群公告（</p><h3 id="第二题">第二题</h3><p>问题 4 直接 Google 搜图可以得到结果，注意是景点名不是景观名。</p><p>问题 3 相对麻烦很多，因为可用信息太少了。我们可以从中发现两个比较突出的特征：彩虹跑道、垃圾桶。</p><p>仔细看垃圾桶上的字，可以分辨出 『六安』 两个字，这帮我们缩小了范围，大概率是在六安，当然也不能排除安徽省内。</p><p>以 『六安 彩虹跑道』等关键字搜索，翻遍各种平台，在百度的资讯选项卡中找到了一篇文章，包含了类似的图片，虽然它标的公园名字是错的，但我们可以通过这些图片继续搜图，最终找到了公园名称。</p><h3 id="第三题">第三题</h3><p>第三题对于火车迷来说应该是很容易的，但我完全不会，怎么办呢？</p><p>以提示的『四编组动车』为关键词进行搜索，可以得到 『CRH6F-A』和『CRH6A-A』这两个比较标志性的型号，此外可以看到列车涂装是红色的，通过对比图片可以看到列车的名称是『怀密号』，B 站找视频，看乘车全程，可以找到类似的地方，在地图上找一下就能找到最近的医院了。</p><h2 id="不宽的宽字符">不宽的宽字符</h2><p><s>小 A 是怎么做到测试无误的</s></p><p>写个辅助函数帮助我们看文件名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *byte_pointer;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">show_bytes</span><span class="hljs-params">(byte_pointer start, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>  <span class="hljs-type">int</span> i;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; %.2x&quot;</span>, start[i]); <span class="hljs-comment">// line:data:show_bytes_printf</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后添加 <code>show_bytes((byte_pointer)filename.c_str(), 24);</code>，可以发现如果是直接输进去 <code>Z:\\theflag</code>（注意，题目里给 <code>Z:\theflag</code>，并不代表真的是这么输就行了，因为 <code>\</code> 会转义，需要两个 <code>\</code> 才能正常得到 <code>\</code> 字符），会输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">5a 00 3a 00 5c 00 74 00 68 00 65 00 66 00 6c 00 61 00 67 00 0d 00 00 00<br></code></pre></td></tr></table></figure><p>其实我们可以发现，后面加不加东西，根本就不影响我们能不能弄到 flag，因为代码本来就有问题！</p><p>欸，为什么中间会有这么多 0 呢。这是因为输入的数据以 utf-8 储存，每个字符占 8 比特，也就是上面的两个 16 进制数字，经过了神奇的变化，就变成了现在这样。</p><p>要想让中间的 0 消失，我们直接输入 utf-16 的内容，就可以避免被转成这样了。可以用 Visual Studio Code 改编码方式，把 <code>Z:\\theflag</code> 存为 utf-16 编码。由于 utf-16 一个字符占两个字节，转成 utf-16 之后的内容没法正常显示，因为少了一个字节，用 16 进制编辑器在最后加上两个 0 就好了。</p><h2 id="PowerfulShell">PowerfulShell</h2><p>我们首先看一下还剩什么符号：: ` 0 1 2 3 4 5 6 7 8 9 + - _ | $ [] {} ~ =</p><p>用这些符号是不足以实现命令 <code>cat /flag</code> 的，我们至少需要字母。</p><p>最开始我考虑获取 \ 来对八进制数字进行转义获取字母，但发现 \ 很难获取。</p><p>我们可以通过 <code>$&#123;var:a:b&#125;</code> 来截取变量中的字符，而首先我们需要一个可获取的字符串并存入变量。</p><p>执行 <code>_1=~</code>，我们就获得了 <code>/players</code>，这还不够，我们还需要更多字符。</p><p>于是尝试截取字母 p 和 s，组成 ps，并将输出捕获，这样就有了更多字符，从中我们仍然得不到 <code>flag</code> 这个字符串，但我们有了 <code>cd</code> 和 <code>ls</code>。</p><p>来到根目录，捕获 <code>ls</code> 的输出，这样字母就足够了。</p><p>变量参考：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">_1=~<br>_2=$&#123;_1:1:1&#125;<br>_3=$&#123;_1:7:1&#125;<br>_4=`$_2$_3`<br>_5=$&#123;_4:56:1&#125;<br>_6=$&#123;_4:58:1&#125;<br>_7=$&#123;_1:$[1-1]:1&#125;<br>_8=$[1-1] // 替代 0<br>_9=$&#123;_4:1$&#123;_8&#125;1:1&#125;<br>_11=`$_9$_3 $_7`<br>_12=$&#123;_11:19:1&#125;<br>_13=$&#123;_11:7:1&#125;<br>_14=$&#123;_11:17:4&#125;<br></code></pre></td></tr></table></figure><h2 id="Node-js-is-Web-Scale">Node.js is Web Scale</h2><p>我先把 set 操作时可能会影响我的 <code>JSON.stringify</code> 干掉，改成直接传没转义过的字符串。</p><p>分析源代码我们发现，唯一可能让我们执行 <code>cat /flag</code> 的地方在这里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/execute&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> key = req.<span class="hljs-property">query</span>.<span class="hljs-property">cmd</span>;<br>  <span class="hljs-keyword">const</span> cmd = cmds[key];<br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>);<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">execSync</span>(cmd).<span class="hljs-title function_">toString</span>());<br>&#125;);<br></code></pre></td></tr></table></figure><p>但是我们发现 <code>cmds</code> 似乎已经写死了。拷打 LLM 之后，LLM 告诉我这里有原型链污染的问题，<code>&#123;&#125;</code> 实际上是一个对象（如果你往键里塞 <code>...</code>，按 <code>.</code> 分割之后再获取，就会输出 <code>&#123;&#125;</code> 的类型 <code>Object</code> 了），而它有额外的属性 <code>__proto__</code>，这个属性继承自 <code>Object</code>，在分割输入的键值时如果没有滤掉这个属性，在设置的时候其实设置的是 <code>Object</code> 对象的 <code>__proto__</code> 属性，这会导致所有继承于 <code>Object</code> 的对象 <code>__proto__</code> 都变掉，这样就可以修改 <code>cmds</code> 了。</p><h2 id="PaoluGPT">PaoluGPT</h2><p>从小题名字上我们就可以猜出大概的做法了。</p><p>第一题毕竟是 『千里挑一』 嘛，flag 肯定就藏在这些网页里了。只要你有耐心可以一个个去找，当然，更好的方法是爬虫。</p><p>第二题，『未知』的东西一定不在这个列表里，我最开始尝试随机生成 UUID 然后访问，但算了算发现地球爆炸都跑不完，所以放弃了这种做法。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/view&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>():<br>    conversation_id = request.args.get(<span class="hljs-string">&quot;conversation_id&quot;</span>)<br>    results = execute_query(<span class="hljs-string">f&quot;select title, contents from messages where id = &#x27;<span class="hljs-subst">&#123;conversation_id&#125;</span>&#x27;&quot;</span>)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;view.html&quot;</span>, message=Message(<span class="hljs-literal">None</span>, results[<span class="hljs-number">0</span>], results[<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure><p>分析代码我们可以发现，这里的 <code>conversation_id</code> 是直接替换进去的，没有经过转义，所以会存在 SQL 注入的风险。上面有查找 <code>shown = true</code> 的，要想“窥探未知”，自然就是找 <code>shown = false</code> 的了。</p><p>在地址栏中把 <code>conversation_id=</code> 后面改成 <code>' or shown = false--</code> 即可。</p><h2 id="强大的正则表达式">强大的正则表达式</h2><p>第一问通过搜索发现，只要最后四位是 16 的倍数，整个数字就是 16 的倍数了。直接用 1000 以内的数字去匹配后四位即可。</p><p>第二问仍然搜索，可以找到<a href="https://www.codewars.com/kata/5993c1d917bc97d05d000068">一道题</a>，想办法搞到题解就可以了。或者也可以在 Github 上搜这道题的名字，也有人分享了做法。这里有好多做法没法通过，可能要多试几个。</p><p>可惜我 Not Powerful Enough，做不出来第三题。</p><h2 id="惜字如金-3-0">惜字如金 3.0</h2><p>第一题直接人肉补全就行了。剩下的我不会。</p><h2 id="优雅的不等式">优雅的不等式</h2><p>知乎搜索『量化调酒师』，他有篇文章刚好能解决这题。</p><p>我们需要写脚本来自动生成式子，这可以用 ai 来辅助。</p><p>注意如果直接用网页复制粘贴，连接会超时被切断，需要使用一些方法（比如 <code>pwntools</code>）来上传。</p><p>以及 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 的迭代，虽然不知道为什么，但是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> 跑得奇慢，建议直接用 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup></mrow><annotation encoding="application/x-tex">2^k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 来作为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>。特别地，当到了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>37</mn></mrow><annotation encoding="application/x-tex">37</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">37</span></span></span></span> 个测试点以后，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 为 128，生成的字符串会太长，可以适当降低 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>。</p><p><s>非常烂的</s>参考代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> expand, simplify, collect, solve, solveset<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> integrals<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> log, pi<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> factor_terms<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> Eq, Interval<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> remote<br><span class="hljs-keyword">import</span> time, re<br><br>conn = remote(<span class="hljs-string">&#x27;202.38.93.141&#x27;</span>, <span class="hljs-number">14514</span>)<br>token = <span class="hljs-string">b&#x27;input_your_token&#x27;</span><br>conn.send(token)<br>conn.send(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>conn.recvline()<br>conn.recvline()<br>conn.sendline(<span class="hljs-string">b&#x27;4*((1-x**2)**(1/2)-(1-x))&#x27;</span>)<br>conn.recvline()<br>conn.recvline()<br>conn.sendline(<span class="hljs-string">b&#x27;x**2*(x - 1)**2*(15*x**2 - 2*x + 15)/(x**2 + 1)&#x27;</span>)<br>conn.recvline()<br>conn.recvline()<br>conn.recvline()<br><br>x = symbols(<span class="hljs-string">&#x27;x&#x27;</span>)<br>a, b, c = symbols(<span class="hljs-string">&#x27;a b c&#x27;</span>)<br>n = symbols(<span class="hljs-string">&#x27;n&#x27;</span>)<br><br>formula = (x**n * (<span class="hljs-number">1</span>-x)**n * (a + b*x + c*x*x))/(<span class="hljs-number">1</span>+x**<span class="hljs-number">2</span>)<br><br>cnt: <span class="hljs-built_in">int</span> = <span class="hljs-number">3</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;testcase&quot;</span>, cnt)<br>    cnt += <span class="hljs-number">1</span><br>    line = conn.recvline()<br>    response = line.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(response.strip(<span class="hljs-string">&#x27;\n&#x27;</span>))<br><br>    pattern = <span class="hljs-string">r&#x27;\d+/\d+&#x27;</span><br>    matches = re.findall(pattern, response)<br>    numbers = matches[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br>    p: <span class="hljs-built_in">int</span> = <span class="hljs-built_in">int</span>(numbers[<span class="hljs-number">0</span>])<br>    q: <span class="hljs-built_in">int</span> = <span class="hljs-built_in">int</span>(numbers[<span class="hljs-number">1</span>])<br><br>    domain = Interval(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>    cur_n: <span class="hljs-built_in">int</span> = <span class="hljs-number">32</span><br><br>    <span class="hljs-keyword">if</span> (cnt &gt; <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> cnt &lt;= <span class="hljs-number">30</span>):<br>        cur_n = <span class="hljs-number">64</span><br>    <span class="hljs-keyword">elif</span> (cnt &gt; <span class="hljs-number">30</span> <span class="hljs-keyword">and</span> cnt &lt; <span class="hljs-number">37</span>):<br>        cur_n = <span class="hljs-number">128</span><br>    <span class="hljs-keyword">elif</span> (cnt &gt;= <span class="hljs-number">37</span>):<br>        cur_n = <span class="hljs-number">112</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(cur_n, end=<span class="hljs-string">&#x27; &#x27;</span>)<br>        cur_formula = formula.subs(&#123;n: cur_n&#125;)<br>        integraled_formula = integrals.integrate(cur_formula, (x, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>        integraled_formula = simplify(integraled_formula)<br><br>        pi_formula = integraled_formula.coeff(pi)<br>        log2_formula = integraled_formula.coeff(log(<span class="hljs-number">2</span>))<br>        other_formula = integraled_formula.subs(&#123;pi: <span class="hljs-number">0</span>, log(<span class="hljs-number">2</span>): <span class="hljs-number">0</span>&#125;)<br><br>        solutions = solve(<br>            (<br>                Eq(pi_formula, q),<br>                Eq(log2_formula, <span class="hljs-number">0</span>),<br>                Eq(other_formula, -p)<br>            ), (a, b, c)<br>        ) <br><br>        solution = cur_formula.subs(solutions)<br>        result = cur_formula.subs(solutions)/q<br>        result = simplify(result)<br><br>        f = (a + b*x + c*x*x).subs(solutions)<br>        formula_str = <span class="hljs-built_in">str</span>(result).replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (solveset(f &gt;= <span class="hljs-number">0</span>, x, domain) != domain):<br>            cur_n *= <span class="hljs-number">2</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(formula_str) &gt; <span class="hljs-number">400</span> <span class="hljs-keyword">and</span> cnt &gt;= <span class="hljs-number">37</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(formula_str), end=<span class="hljs-string">&#x27;! &#x27;</span>)<br>            expanded_str = <span class="hljs-built_in">str</span>(expand(formula_str))<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(expanded_str) &lt;= <span class="hljs-number">400</span>):<br>                formula_str = expanded_str<br>            <span class="hljs-keyword">else</span>:<br>                cur_n += <span class="hljs-number">4</span><br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(formula_str)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(formula_str))<br>        conn.sendline(formula_str)<br>        conn.recvline()<br>        <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h2 id="无法获得的秘密">无法获得的秘密</h2><p>只能通过屏幕获取信息，考虑 OCR。</p><p>使用 <code>hexdump /secret | more</code> 可以逐页获取 <code>/secret</code> 内数据的十六进制字符串表示，然后只需要截图就可以了。</p><p>为了方便下面的 OCR 步骤，我们可以控制每一张图片的格式一致，并且尽量调大字体。我把屏幕分辨率调至某个值，同时终端最大化，字体设置为 <code>Monospace Bold</code>，字号 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>20</mn></mrow><annotation encoding="application/x-tex">20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">20</span></span></span></span>，直接按固定的屏幕坐标截图就可以了，这样可以保证每次截图获取的数据都一样。</p><p>截图需要避免一些坑点，因为页数比较多，我写了个脚本自动帮我往下翻，但是如果翻得太快会导致视频来不及刷新<s>建议在网络环境比较好的条件下进行，比如插网线</s>；而太慢会导致超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>15</mn></mrow><annotation encoding="application/x-tex">15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">15</span></span></span></span> 分钟<s>等半天也烦人</s></p><p>同样是为了便于 OCR，我先将图片二值化。</p><p>我尝试使用现有的解决方案，发现虽然准确率较高，但是不太能保证百分之百的准确率，即使是微调的模型我也没法确保必定正确<s>也有可能是我太菜</s>，所以尝试之后我就另寻他法了。</p><p>注意到截下来的图片都是固定格式的，字符都等宽的，我想到可以选一些字符作为标准，对于图片中的字符逐个匹配，计算相似度，选取最高的作为结果，如果相似度差太多就标成问号，在得到的结果中搜索问号手动排除。</p><p>在上一步的基础上，我得到了一系列文件，经过去重（因为截图步骤可能有差错）之后转为 <code>bytes</code> 写入文件即可。</p><p>整个步骤思路挺简单，但实现起来耗了很久时间<s>菜</s>。</p><p>（我怎么就没想到用容错率更高的手段，比如 QRCode 呢呜呜呜）</p><h2 id="链上转账助手">链上转账助手</h2><p>直接 Copilot 启动，问 o1-preview，就可以获得前两问的 flag 了（第三问它告诉我要写底层代码，可能是我 PUA 技术还不够，它没法写出来）</p><h2 id="不太分布式的软总线">不太分布式的软总线</h2><p>仍然是用 o1 大法，顺利获得 3 个 flag（我都不知道我怎么就获得了，莫名其妙就过了）</p><p><s>或许这才是 AI 题吧</s></p><h2 id="关灯">关灯</h2><p>前三小题其实就是 OI 题，经典的关灯问题，转化成求解异或线性方程组，然后进行高斯消元。参考代码（灯的状态手动填一下）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bitset&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> n = <span class="hljs-number">11</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> tot = n * n * n;<br><span class="hljs-type">bool</span> result[n + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br><span class="hljs-type">bool</span> M[tot + <span class="hljs-number">1</span>][tot + <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">conv</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> z)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (x - <span class="hljs-number">1</span>) * n * n + (y - <span class="hljs-number">1</span>) * n + z;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">generateMatrix</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;<br>                <span class="hljs-type">int</span> index = <span class="hljs-built_in">conv</span>(i, j, k);<br>                M[index][index] = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>) &#123;<br>                    M[index][<span class="hljs-built_in">conv</span>(i - <span class="hljs-number">1</span>, j, k)] = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (i &lt; n) &#123;<br>                    M[index][<span class="hljs-built_in">conv</span>(i + <span class="hljs-number">1</span>, j, k)] = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>) &#123;<br>                    M[index][<span class="hljs-built_in">conv</span>(i, j - <span class="hljs-number">1</span>, k)] = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (j &lt; n) &#123;<br>                    M[index][<span class="hljs-built_in">conv</span>(i, j + <span class="hljs-number">1</span>, k)] = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">1</span>) &#123;<br>                    M[index][<span class="hljs-built_in">conv</span>(i, j, k - <span class="hljs-number">1</span>)] = <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (k &lt; n) &#123;<br>                    M[index][<span class="hljs-built_in">conv</span>(i, j, k + <span class="hljs-number">1</span>)] = <span class="hljs-literal">true</span>;<br>                &#125;<br>                M[index][n*n*n<span class="hljs-number">+1</span>] = result[i][j][k];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">gauss</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> tot = n*n*n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++) &#123;<br>        <span class="hljs-type">int</span> k = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i<span class="hljs-number">+1</span>; j &lt;= tot; j++) <span class="hljs-keyword">if</span> (M[j][i] == <span class="hljs-number">1</span>) k = j;<br>        <span class="hljs-type">int</span> now = M[k][i];<br>        <span class="hljs-keyword">if</span> (k != i) <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= tot + <span class="hljs-number">1</span>; j++) <span class="hljs-built_in">swap</span>(M[i][j],M[k][j]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= tot; k++) <span class="hljs-keyword">if</span> (k != i &amp;&amp; M[k][i]) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i; j &lt;= tot + <span class="hljs-number">1</span>;j++) M[k][j] = M[k][j] ^ M[i][j];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::string input = <span class="hljs-string">&quot;input_light_status&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;<br>                result[i][j][k] = input[(i - <span class="hljs-number">1</span>) * n * n + (j - <span class="hljs-number">1</span>) * n + k - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">generateMatrix</span>();<br>    <span class="hljs-built_in">gauss</span>();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i++) &#123;<br>        cout &lt;&lt; M[i][tot + <span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="零知识数独">零知识数独</h2><p>不会数独，也不会什么零知识证明，不过第一题还是可以做的，直接搜在线的解数独工具即可。</p><h2 id="先不说关于我从零开始独自在异世界转生成某大厂家的-LLM-龙猫女仆这件事可不可能这么离谱，发现-Hackergame-内容审查委员会忘记审查题目标题了ごめんね，以及「这么长都快赶上轻小说了真的不会影响用户体验吗🤣」">先不说关于我从零开始独自在异世界转生成某大厂家的 LLM 龙猫女仆这件事可不可能这么离谱，发现 Hackergame 内容审查委员会忘记审查题目标题了ごめんね，以及「这么长都快赶上轻小说了真的不会影响用户体验吗🤣」</h2><p><s>这题什么鬼名字啊</s></p><p>第一题配合大模型，手动还原即可。有个坑点就是 <code>Txx xxxx wxs on</code> 这里的 <code>xxxx</code> 容易被猜成 <code>race</code>，实际上是 <code>game</code>，这玩意儿卡了我好多天。</p><p><s>所以你们穿 lab coat 吗</s></p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>Hackergame</tag>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAMES101 学习总结</title>
    <link href="/2024/09/06/GAMES101-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/06/GAMES101-%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>第一次知道 GAMES 系列的课程是在高一，当时想学 OpenGL，看了大名鼎鼎的 <a href="https://learnopengl-cn.github.io/">LearnOpenGL</a>，不过不太能理解每一步为什么要这么做，于是想要学习背后的理论。当时 GAMES101 学了一半，因为高中学业压力还是蛮大的，就暂时放下了。直到这个暑假，我终于有时间去完成这门课了。中途也有不少波折，所幸最终还是完成了。不过现在还需要再消化一下，大作业也还没完成，预计今年能够解决。</p><p>这门课系统地介绍了计算机图形学的四大组成部分：光栅化成像、几何表示、光线传播理论、动画与模拟（不过貌似讲的最多的还是光线追踪 hhh</p><p>大部分课程难度还好，至少听起来是这样的，光线追踪那一块算是最难的，不过闫老师讲得很好，还是容易理解的。作业的话，框架似乎还欠缺打磨，有些地方有一些小问题，不过总体来说还是不错的。很有趣，做完作业也很有成就感，真的是能让人深切感受到图形学之美。</p><p>感谢闫老师这门课，把我拉进了图形学的大坑。如今进入大学，我将图形学作为以后的发展方向，希望我能够在这条路上走得远。</p><p>另附听课时记的笔记（用 Typst 写的）</p><div class="row">    <embed src="../../../../assets/GAMES101.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机图形学</tag>
      
      <tag>GAMES101</tag>
      
      <tag>学习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LevelDB 源码阅读笔记·初探 [0x01]</title>
    <link href="/2024/06/06/Leveldb-0x01-%E5%88%9D%E6%8E%A2/"/>
    <url>/2024/06/06/Leveldb-0x01-%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="构建">构建</h2><p>首先 clone 代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> --recurse-submodules https://github.com/google/leveldb.git<br></code></pre></td></tr></table></figure><p>由于 leveldb 使用了 googletest 和 benchmark，所以 clone 的时候要加上 <code>--recurse-submodules</code></p><p>接下来我直接用 vscode 打开了 leveldb 目录，然后选定工具链， CMake 插件自动地完成了配置。</p><p>不得不说现在的 vscode 用起来非常顺手，构建、测试一步到位。</p><p>代码阅读方面我使用了 Sourcetrail，这是个很好的工具，可惜停更了，目前 Github 仓库已经归档了。</p><p>在读代码的时候还是需要对照着文档（<code>leveldb/doc/index.md</code>），这样便于理解函数的作用。</p><h2 id="开始">开始</h2><p>首先来看一下核心的 <code>leveldb/include/leveldb/db.h</code></p><p>开头 inlucde 了一些头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leveldb/export.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leveldb/iterator.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;leveldb/options.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>这里 <code>export.h</code> 包含一些宏定义，这些都是常规操作，但作为初学者，我还是将这些记录下来</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> !defined(LEVELDB_EXPORT)</span><br><br><span class="hljs-comment">// 中间部分省略</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEVELDB_EXPORT</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br></code></pre></td></tr></table></figure><p>这样做防止了 <code>LEVELDB_EXPORT</code> 宏重复定义，确保函数和类成员只导出一次。</p><p><code>iterator.h</code> 定义了迭代器，用于访问 Table 和 DB 对象。大概作用应该和 STL 里的迭代器有相似性。Iterator 中的 const 方法是线程安全的。</p><p>我们先不去管这个具体是怎么实现的，先放一放。</p><p><code>options.h</code> 看名字就知道里面是一些选项，我们先不去管它。</p><p>回到 <code>db.h</code>，这里定义了几个类和结构体。</p><p><code>Snapshot</code>： 大概是用于保存快照的，不过现在也不知道如何去用。</p><p><code>Range</code>： 看不懂，跳过。</p><p><code>DB</code>：这个类是 leveldb 库的核心，它定义了 DB 对象及一系列接口。这些会在下一节进行介绍。</p><p>最后是两个独立的函数 <code>DestroyDB</code> 和 <code>RepairDB</code>，分别用于销毁 DB 对象和抢救打不开的 DB。</p><p>这里 <code>DestroyDB</code> 没有设计成 DB 类的方法，我想，这是因为这个函数比较危险，在使用时需要小心，如果设计成 DB 类的方法，可能一不小心就删库了。而作为一个独立的函数，增加了调用时的复杂度和明显度，这也是对用户的提醒与保护。</p><p>注意因为兼容性的原因，就算是 <code>DestroyDB</code> 方法没有成功，也可能会返回 <code>Status::OK()</code>，所以需要额外检查下错误信息。</p><h2 id="DB-类的方法">DB 类的方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> Status <span class="hljs-title">Open</span><span class="hljs-params">(<span class="hljs-type">const</span> Options&amp; options, <span class="hljs-type">const</span> std::string&amp; name,</span></span><br><span class="hljs-params"><span class="hljs-function">                     DB** dbptr)</span></span>;<br></code></pre></td></tr></table></figure><p>首先是 <code>Open</code> 方法，用于打开数据库对象。值得注意的是，这里用到了双重指针，会在 <code>dbptr</code> 指针指向的地方创建一个指针，指向实际的数据库对象。我暂时还不知道这种设计有什么作用，先放一放，等之后了解全貌，这么设计的理由大概就会浮出水面。</p><p>接下来是 DB 类的构造函数和析构函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">DB</span>() = <span class="hljs-keyword">default</span>;<br><br><span class="hljs-built_in">DB</span>(<span class="hljs-type">const</span> DB&amp;) = <span class="hljs-keyword">delete</span>;<br>DB&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> DB&amp;) = <span class="hljs-keyword">delete</span>;<br><br><span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">DB</span>();<br></code></pre></td></tr></table></figure><p><code>DB() = default</code> 是设置了一个默认的构造函数，这样符合 C++11 的规范。</p><p>DB 类在使用的时候，应当是独占访问的，不应该随意复制，所以将拷贝构造函数、拷贝赋值构造函数和都删除了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> Status <span class="hljs-title">Put</span><span class="hljs-params">(<span class="hljs-type">const</span> WriteOptions&amp; options,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-type">const</span> Slice&amp; key, <span class="hljs-type">const</span> Slice&amp; value)</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> Status <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">const</span> WriteOptions&amp; options,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">const</span> Slice&amp; key)</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> Status <span class="hljs-title">Write</span><span class="hljs-params">(<span class="hljs-type">const</span> WriteOptions&amp; options, WriteBatch* updates)</span> </span>= <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">virtual</span> Status <span class="hljs-title">Get</span><span class="hljs-params">(<span class="hljs-type">const</span> ReadOptions&amp; options,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-type">const</span> Slice&amp; key, std::string* value)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>然后是经典的增删改查，我准备留到具体实现的时候来介绍。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> Iterator* <span class="hljs-title">NewIterator</span><span class="hljs-params">(<span class="hljs-type">const</span> ReadOptions&amp; options)</span> </span>= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>这个方法用于生成迭代器以访问 DB 对象，用起来和 STL 类似之处。这里贴出文档里的示例以供理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">leveldb::Iterator* it = db-&gt;<span class="hljs-built_in">NewIterator</span>(leveldb::<span class="hljs-built_in">ReadOptions</span>());<br><span class="hljs-keyword">for</span> (it-&gt;<span class="hljs-built_in">SeekToFirst</span>(); it-&gt;<span class="hljs-built_in">Valid</span>(); it-&gt;<span class="hljs-built_in">Next</span>()) &#123;<br>  cout &lt;&lt; it-&gt;<span class="hljs-built_in">key</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; <span class="hljs-string">&quot;: &quot;</span>  &lt;&lt; it-&gt;<span class="hljs-built_in">value</span>().<span class="hljs-built_in">ToString</span>() &lt;&lt; endl;<br>&#125;<br><span class="hljs-built_in">assert</span>(it-&gt;<span class="hljs-built_in">status</span>().<span class="hljs-built_in">ok</span>());  <span class="hljs-comment">// Check for any errors found during the scan</span><br><span class="hljs-keyword">delete</span> it;<br></code></pre></td></tr></table></figure><p>迭代器要及时 <code>delete</code>，按照注释里的说法，迭代器要在 db 对象 <code>delete</code> 之前进行 <code>delete</code>。像这段示例，在迭代器用完之后就 <code>delete</code> 了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">const</span> Snapshot* <span class="hljs-title">GetSnapshot</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">ReleaseSnapshot</span><span class="hljs-params">(<span class="hljs-type">const</span> Snapshot* snapshot)</span> </span>= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>两个跟 Snapshot 有关的函数，先放一放。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> Status <span class="hljs-title">GetProperty</span><span class="hljs-params">(<span class="hljs-type">const</span> Slice&amp; property, std::string* value)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>这个方法用于获取数据库的属性，比如版本号，文件大小等。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">GetApproximateSizes</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> Range* range, <span class="hljs-type">int</span> n, <span class="hljs-type">uint64_t</span>* sizes)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>这个方法用于获取数据库的文件大小，可能不包含最近写入的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">CompactRange</span><span class="hljs-params">(<span class="hljs-type">const</span> Slice* begin, <span class="hljs-type">const</span> Slice* end)</span> </span>= <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>最后一个方法，用于压缩数据库，也留到具体实现的时候介绍。</p><h2 id="关于纯虚函数">关于纯虚函数</h2><p>在阅读代码的时候，可以发现，<code>db.h</code> 中大多数函数都是纯虚函数，DB 类实际上是一个接口，具体的实现都在 <code>DBImpl</code> 类当中。</p><p>这是用到了多态性，在代码中使用的时候，使用 DB 的接口就可以，只需要</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">DB* db;<br>Status s = DB::<span class="hljs-built_in">Open</span>(options, name, &amp;db);<br></code></pre></td></tr></table></figure><p>就可以得到一个 DB 对象，而不用关心 DB 对象的具体实现。</p><p>这里 leveldb 用到了工厂模式，隐藏了创建 DB 对象的过程。</p><p>这种方式有不少好处，一个是使用起来简单，不需要关注具体实现；还可以便于后期扩展，甚至说你哪怕底层根本不是 leveldb，代码里反正认的是这个接口，替换掉也不会影响已有代码。</p><h2 id="小结">小结</h2><p>本节中我们了解了 <code>db.h</code> 中的一些接口，对 leveldb 的功能有了一个大致的了解。</p><p>接下来，我们将开始看 leveldb 的具体实现，了解它的具体实现。难度会比较大，估计要花上很长时间。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>源码阅读</category>
      
      <category>leveldb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>C++</tag>
      
      <tag>源码阅读</tag>
      
      <tag>LevelDB</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024 生物联赛游记</title>
    <link href="/2024/05/12/2024%E7%94%9F%E7%89%A9%E8%81%94%E8%B5%9B%E6%B8%B8%E8%AE%B0/"/>
    <url>/2024/05/12/2024%E7%94%9F%E7%89%A9%E8%81%94%E8%B5%9B%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>时间：2024 年 5 月 12 日</p><p>地点：南师大仙林校区</p><h2 id="前言">前言</h2><p>在完全没有接触过生物竞赛的情况下，我莫名其妙过了校内预选（甚至还故意压了分，本来不想去的），然后临时抱佛脚突击了一个月（其实只正经学了一星期），就去参加生物联赛了。</p><p>按照惯例，这次还是要写篇游记的，于是就有了这篇流水账。</p><h2 id="出发">出发</h2><p>细雨蒙蒙的午后，出发前往南师大</p><p>忙碌的五月会结出什么果实呢？</p><p>上次去南师大还是去年化学国初，再次踏上行程，只希望这次不会晕车。</p><p>经过丹阳的一个服务区时下了特别大的雨，下车去上厕所，真是惊心动魄。</p><h2 id="看考场">看考场</h2><p><img src="https://bu.dusays.com/2024/05/14/6642c83bd94c7.jpg" alt="到达南师大"></p><p>好气哦，上次去参加<a href="../../../../2023/09/03/2023%E5%8C%96%E5%AD%A6%E5%9B%BD%E5%88%9D%E6%B8%B8%E8%AE%B0/">化学国初</a>的时候，考场不给看，饭也不让在里面吃，刚考完就被赶走了，这次生物竟然让提前看考场了，看来生物比化学有排面。</p><p>一组人，在里面像是一群呆子。先是逛来逛去，去食堂看看，不知道该吃什么，于是没吃；去看考场，不知道考场号在哪看，在楼底下愣了半天，最后才发现原来在外面；最后只好在车旁边站着等别人，等了好久，等待过程中还被树上落下来的雨淋了一身。</p><h2 id="在宾馆">在宾馆</h2><p>到宾馆后，在连 WIFI 时准备故技重施，切换成英文来躲过输手机号的步骤，可惜这次失败了。</p><p>密码框要输名字，控件还真就用了密码框，中文不好输，只能复制了，但没搞懂要输什么，试了好多次，最后尝试次数太多不让我登了，就算换中文，输手机号，也不行了。好吧，算你厉害。</p><p>考前心不在焉地抱佛脚，看了看代谢相关的内容。咳嗽得厉害，半夜咳醒了几次。</p><p>早上六点半昏昏沉沉地起来，头脑里一团浆糊，疼。</p><p>那边的早饭甚至还不如我们学校，吃完之后又回房间休息到八点多（？起来这么早干啥）</p><h2 id="考试">考试</h2><p><img src="https://bu.dusays.com/2024/05/14/6642c8a732adb.jpg" alt="人山人海"></p><p>考前临时记了一下氨基酸缩写啥的，想着如果考到了会是为数不多的能拿分的题目。</p><p>进考场，这次内心毫无波澜，反正啥也不会，靠运气了。没睡好 + 感冒，头晕目眩，考试的时候很难受。</p><p>试卷发下来愣了，怎么没有什么代谢的题目！氨基酸也没考！白抱佛脚了。</p><p>越做越不对劲，怎么这么多多选，把会的和不会的杂糅在一起，导致会的也得不到分。行吧，纯靠运气了，直接乱蒙。</p><p>遗传题倒是蛮好做，整张卷子也就遗传题能做。有道电位的题目貌似之前考过，就是改了下数据，要用能斯特方程，后悔没去弄明白，心想考不到了，结果还是不会做（化学白学了！）</p><p>好吧，看来要当分母了。</p><h2 id="南师大的一餐">南师大的一餐</h2><p><img src="https://bu.dusays.com/2024/05/14/6642cadd32448.jpg" alt="15 元的午餐"></p><p>中午吃得还蛮好，就是厕所找不到。</p><p>众里寻他千百度，蓦然回首，厕所却在犄角旮旯处</p><p>该回去了</p><h2 id="后记">后记</h2><p>在车上越咳越厉害，到学校刚好到了晚自习的时间，想了想还是没去，而是去了医院。</p><p>噫，好，肺炎！</p><hr><p>时运不济啊，最后得了个全省 900 多名，别人啥都没学却拿了全省 200 多名。</p><p>好吧，高考去了。</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生物</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音乐元数据标签格式 ID3v1 介绍</title>
    <link href="/2024/04/20/music-tag-id3v1/"/>
    <url>/2024/04/20/music-tag-id3v1/</url>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>ID3v1 是一种音乐元数据标签格式，一般用于 mp3 文件，处于文件末尾，共 128 字节。</p><p>它是一种较为古老的标签格式，能存储的数据比较少，不支持多语言，只支持 ASCII 编码，所以逐渐被淘汰了，现在一般使用的是 ID3v2等。</p><p>数据格式如下：</p><table><thead><tr><th>区域</th><th>长度</th><th>字节位置</th><th>描述</th></tr></thead><tbody><tr><td>开头</td><td>3</td><td>0-2</td><td>“TAG”，标签。</td></tr><tr><td>标题</td><td>30</td><td>3-32</td><td>歌曲标题，最多30个英文字符。</td></tr><tr><td>艺术家</td><td>30</td><td>33-62</td><td>作曲或演唱者的名字，最多30个英文字符。</td></tr><tr><td>专辑</td><td>30</td><td>63-92</td><td>专辑名称，最多30个英文字符。</td></tr><tr><td>年分</td><td>4</td><td>93-96</td><td>西元年分，四个数字。</td></tr><tr><td>评论</td><td>28 或30</td><td>97-124 或 97-126</td><td>就是评论。</td></tr><tr><td>零字节</td><td>1</td><td>125</td><td>如果有存储曲目，那么这个字节会存储一个二进制的0。</td></tr><tr><td>曲目</td><td>1</td><td>126</td><td>这首歌在该专辑中的曲目，或者为0。若前一个字节非零，则此栏内容无效。</td></tr><tr><td>艺术类型</td><td>1</td><td>127</td><td>一系列艺术类型清单中的编号数，默认为255。</td></tr></tbody></table><p>未特殊说明的位置，以 0 为默认值</p><p>其中艺术类型（Genre）有固定的对应关系，如下所示：</p><table><thead><tr><th>Number</th><th>Genre</th></tr></thead><tbody><tr><td>00</td><td>Blues</td></tr><tr><td>01</td><td>Classic rock</td></tr><tr><td>02</td><td>Country</td></tr><tr><td>03</td><td>Dance</td></tr><tr><td>04</td><td>Disco</td></tr><tr><td>05</td><td>Funk</td></tr><tr><td>06</td><td>Grunge</td></tr><tr><td>07</td><td>Hip-hop</td></tr><tr><td>08</td><td>Jazz</td></tr><tr><td>09</td><td>Metal</td></tr><tr><td>10</td><td>New age</td></tr><tr><td>11</td><td>Oldies</td></tr><tr><td>12</td><td>Other</td></tr><tr><td>13</td><td>Pop</td></tr><tr><td>14</td><td>Rhythm and blues</td></tr><tr><td>15</td><td>Rap</td></tr><tr><td>16</td><td>Reggae</td></tr><tr><td>17</td><td>Rock</td></tr><tr><td>18</td><td>Techno</td></tr><tr><td>19</td><td>Industrial</td></tr><tr><td>20</td><td>Alternative</td></tr><tr><td>21</td><td>Ska</td></tr><tr><td>22</td><td>Death metal</td></tr><tr><td>23</td><td>Pranks</td></tr><tr><td>24</td><td>Soundtrack</td></tr><tr><td>25</td><td>Euro-techno</td></tr><tr><td>26</td><td>Ambient</td></tr><tr><td>27</td><td>Trip-hop</td></tr><tr><td>28</td><td>Vocal</td></tr><tr><td>29</td><td>Jazz &amp; funk</td></tr><tr><td>30</td><td>Fusion</td></tr><tr><td>31</td><td>Trance</td></tr><tr><td>32</td><td>Classical</td></tr><tr><td>33</td><td>Instrumental</td></tr><tr><td>34</td><td>Acid</td></tr><tr><td>35</td><td>House</td></tr><tr><td>36</td><td>Game</td></tr><tr><td>37</td><td>Sound clip</td></tr><tr><td>38</td><td>Gospel</td></tr><tr><td>39</td><td>Noise</td></tr><tr><td>40</td><td>Alternative rock</td></tr><tr><td>41</td><td>Bass</td></tr><tr><td>42</td><td>Soul</td></tr><tr><td>43</td><td>Punk</td></tr><tr><td>44</td><td>Space</td></tr><tr><td>45</td><td>Meditative</td></tr><tr><td>46</td><td>Instrumental pop</td></tr><tr><td>47</td><td>Instrumental rock</td></tr><tr><td>48</td><td>Ethnic</td></tr><tr><td>49</td><td>Gothic</td></tr><tr><td>50</td><td>Darkwave</td></tr><tr><td>51</td><td>Techno-industrial</td></tr><tr><td>52</td><td>Electronic</td></tr><tr><td>53</td><td>Pop-folk</td></tr><tr><td>54</td><td>Eurodance</td></tr><tr><td>55</td><td>Dream</td></tr><tr><td>56</td><td>Southern rock</td></tr><tr><td>57</td><td>Comedy</td></tr><tr><td>58</td><td>Cult</td></tr><tr><td>59</td><td>Gangsta</td></tr><tr><td>60</td><td>Top 40</td></tr><tr><td>61</td><td>Christian rap</td></tr><tr><td>62</td><td>Pop/funk</td></tr><tr><td>63</td><td>Jungle music</td></tr><tr><td>64</td><td>Native US</td></tr><tr><td>65</td><td>Cabaret</td></tr><tr><td>66</td><td>New wave</td></tr><tr><td>67</td><td>Psychedelic</td></tr><tr><td>68</td><td>Rave</td></tr><tr><td>69</td><td>Showtunes</td></tr><tr><td>70</td><td>Trailer</td></tr><tr><td>71</td><td>Lo-fi</td></tr><tr><td>72</td><td>Tribal</td></tr><tr><td>73</td><td>Acid punk</td></tr><tr><td>74</td><td>Acid jazz</td></tr><tr><td>75</td><td>Polka</td></tr><tr><td>76</td><td>Retro</td></tr><tr><td>77</td><td>Musical</td></tr><tr><td>78</td><td>Rock ‘n’ roll</td></tr><tr><td>79</td><td>Hard rock</td></tr><tr><td>80</td><td>Folk</td></tr><tr><td>81</td><td>Folk rock</td></tr><tr><td>82</td><td>National folk</td></tr><tr><td>83</td><td>Swing</td></tr><tr><td>84</td><td>Fast fusion</td></tr><tr><td>85</td><td>Bebop</td></tr><tr><td>86</td><td>Latin</td></tr><tr><td>87</td><td>Revival</td></tr><tr><td>88</td><td>Celtic</td></tr><tr><td>89</td><td>Bluegrass</td></tr><tr><td>90</td><td>Avantgarde</td></tr><tr><td>91</td><td>Gothic rock</td></tr><tr><td>92</td><td>Progressive rock</td></tr><tr><td>93</td><td>Psychedelic rock</td></tr><tr><td>94</td><td>Symphonic rock</td></tr><tr><td>95</td><td>Slow rock</td></tr><tr><td>96</td><td>Big band</td></tr><tr><td>97</td><td>Chorus</td></tr><tr><td>98</td><td>Easy listening</td></tr><tr><td>99</td><td>Acoustic</td></tr><tr><td>100</td><td>Humour</td></tr><tr><td>101</td><td>Speech</td></tr><tr><td>102</td><td>Chanson</td></tr><tr><td>103</td><td>Opera</td></tr><tr><td>104</td><td>Chamber music</td></tr><tr><td>105</td><td>Sonata</td></tr><tr><td>106</td><td>Symphony</td></tr><tr><td>107</td><td>Booty bass</td></tr><tr><td>108</td><td>Primus</td></tr><tr><td>109</td><td>Porn groove</td></tr><tr><td>110</td><td>Satire</td></tr><tr><td>111</td><td>Slow jam</td></tr><tr><td>112</td><td>Club</td></tr><tr><td>113</td><td>Tango</td></tr><tr><td>114</td><td>Samba</td></tr><tr><td>115</td><td>Folklore</td></tr><tr><td>116</td><td>Ballad</td></tr><tr><td>117</td><td>Power ballad</td></tr><tr><td>118</td><td>Rhythmic Soul</td></tr><tr><td>119</td><td>Freestyle</td></tr><tr><td>120</td><td>Duet</td></tr><tr><td>121</td><td>Punk rock</td></tr><tr><td>122</td><td>Drum solo</td></tr><tr><td>123</td><td>A cappella</td></tr><tr><td>124</td><td>Euro-house</td></tr><tr><td>125</td><td>Dance hall</td></tr><tr><td>126</td><td>Goa music</td></tr><tr><td>127</td><td>Drum &amp; bass</td></tr><tr><td>128</td><td>Club-house</td></tr><tr><td>129</td><td>Hardcore techno</td></tr><tr><td>130</td><td>Terror</td></tr><tr><td>131</td><td>Indie</td></tr><tr><td>132</td><td>Britpop</td></tr><tr><td>133</td><td>Negerpunk</td></tr><tr><td>134</td><td>Polsk punk</td></tr><tr><td>135</td><td>Beat</td></tr><tr><td>136</td><td>Christian gangsta rap</td></tr><tr><td>137</td><td>Heavy metal</td></tr><tr><td>138</td><td>Black metal</td></tr><tr><td>139</td><td>Crossover</td></tr><tr><td>140</td><td>Contemporary Christian</td></tr><tr><td>141</td><td>Christian rock</td></tr></tbody></table><p>一些播放器还会有扩展标签，在这里不进行列举。</p><h2 id="参考资料">参考资料</h2><ul><li><a href="https://zh.wikipedia.org/wiki/ID3">ID3v1 Wikipedia 中文</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>音乐</tag>
      
      <tag>元数据</tag>
      
      <tag>Id3v1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LevelDB 源码阅读笔记·序言 [0x00]</title>
    <link href="/2024/03/10/Leveldb-0x00-%E5%BA%8F%E8%A8%80/"/>
    <url>/2024/03/10/Leveldb-0x00-%E5%BA%8F%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>早就听说 Google 的 LevelDB 代码质量很高，如今突发奇想，想要一探究竟，于是记录下自己阅读 LevelDB 源码的过程。</p><p>作为一个菜鸟，这是我第一次阅读一个正式的开源项目，过程中肯定会遭遇很多困难，但也会收获很多。</p><p>由于基本上是无基础阅读，所以会记一些很基础很简单的东西，写得比较琐碎。</p><p>希望我能够坚持下来，让自己的水平得以提升。</p><h2 id="本地环境">本地环境</h2><ul><li>Deepin 20.9</li><li>clang 15.0.7</li><li>leveldb 1.20</li><li>Cmake 3.22.1</li><li>Visual Studio Code 1.85.2</li><li>Sourcetrail 2021.4.19</li></ul><h2 id="参考">参考</h2><ul><li><a href="https://www.codedump.info/post/20190215-leveldb/">Leveldb代码阅读笔记</a></li></ul><h2 id="目录">目录</h2><p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>源码阅读</category>
      
      <category>leveldb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>笔记</tag>
      
      <tag>C++</tag>
      
      <tag>源码阅读</tag>
      
      <tag>LevelDB</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NOIP2023 游记</title>
    <link href="/2023/11/17/NOIP2023%E6%B8%B8%E8%AE%B0/"/>
    <url>/2023/11/17/NOIP2023%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>继之前在 <a href="../../../../2023/10/20/CSP2023">CSP2023</a> 以踩线的成绩勉强进入 NOIP 后，我又经历了期中考试，结束后又转头准备我的最后一次 NOIP。</p><p>又希望这一天晚点到来，又期待着这一天，不管怎么想，这一天还是来了。</p><p>虽然我很菜，但我还是想记录一下这一次难得的经历。这一次我重点记了比赛之外的经历，就当是一次旅游吧。虽然结局是失败的，但我还是会将这份经历一直珍藏。</p><h2 id="路上">路上</h2><p>上一次去南航还是在 2021 年，坐在高铁上，过去和现在似乎在这一刻有些重叠，透过车窗玻璃我仿佛看见了过去的自己。</p><p>过去的就过去了吧，好好对待当下。</p><p>初冬的田野，展现出收割后的清爽，天空也是澄澈的淡蓝色。大片的微微发黄的土地有时可以延伸到地平线的尽头，不过更多时候是被池塘、湖泊或是树林截断。冬日的冷风也没能影响草木的繁茂，一抹抹鲜艳的绿点缀了平坦开阔的土地。</p><p><img src="https://bu.dusays.com/2023/11/19/6558e42171486.jpg" alt="路上风景1"><br><img src="https://bu.dusays.com/2023/11/19/6558e423ad053.jpg" alt="路上风景2"><br><img src="https://bu.dusays.com/2023/11/19/6558e42658d4f.jpg" alt="路上风景3"><br><img src="https://bu.dusays.com/2023/11/19/6558e4285f7f3.jpg" alt="路上风景4"></p><h2 id="抵达">抵达</h2><blockquote><p>下一站，翠屏山站</p><p>Next station is Cuipinshan</p></blockquote><p>到了翠屏山站，南航就在附近了。</p><p><img src="https://bu.dusays.com/2023/11/19/6558e73911a14.jpg" alt="南航门口"></p><p>不得不说，南京这里的人骑电瓶车真的猛，各种地方都能钻过，特别是外卖小哥，着实是太快了。</p><p>由于说要选手报道啥的，我们走了好一段路绕到南航的大门，然而还是和上次在南师大一样————不让进，只让带队老师进去拿牌子。</p><p>老师出来，只拿到了带队老师的牌子。这次连选手的参赛证都不发了，少了不少仪式感。</p><p>晚饭吃啥呢？</p><p><img src="https://bu.dusays.com/2023/11/19/6558e847b7879.jpg" alt="南航附近"></p><h2 id="食遇">食遇</h2><p>我们决定去吃地锅鸡。</p><p>一进门就注意到了满地的柴火，在一层有几桌人，大概是南航的大学生吧。</p><p>我们到二楼的一个房间里坐下。打量着四周，还蛮有意思的，长征主题。</p><p><img src="https://bu.dusays.com/2023/11/19/6558e96ea3ee5.jpg" alt="店内"></p><p>这家店真是与众不同。</p><p>看样子是一家人在运营这家店，人手不够，忙不过来。点菜，老板把菜单一递，然后就去忙了。等商量好之后，却发现找不到老板了，还得自己去找他。饮料也只能自己下楼去取，就堆在墙边，一大箱一大箱。</p><p>鸡是现杀的，楼下还能不断地听到鸡叫。每张桌有一个大地锅，烧柴火的，会来当场炒，炒的时候淡淡地烟雾弥漫了整个房间。（室内烧柴，我特意留意了一下通风，墙上有几个小排气扇，而门是镂空的，虽然一直开着）</p><p><img src="https://bu.dusays.com/2023/11/19/655952cf36a00.jpg" alt="现场炒鸡"></p><p>做菜的是一个大概五六十岁的奶奶，边炒边和我们聊天。她提到，以前一直就是这样做的，后来有一段改成在后厨做好再直接端上来，结果老顾客都不来了，只好改了回来。</p><p>从来到店里到吃上饭，过去了大概快一小时，不过现杀的就是不一样，确实很好吃。</p><p><img src="https://bu.dusays.com/2023/11/19/655952ce42b0c.jpg" alt="展示"></p><p>他们似乎没有雇人，这种模式导致他们人一多时就忙不过来，当时更改模式或许也是无奈之举。不过，这带来了高粘性的老客户，只能说有失有得吧。</p><h2 id="清晨">清晨</h2><p><img src="https://bu.dusays.com/2023/11/19/6558e847b7879.jpg" alt="出发"></p><p>伴着清晨的第一缕阳光，迎接最后的一战。</p><p>不管结果如何，我会全力以赴。</p><p><img src="https://bu.dusays.com/2023/12/02/656b2fbe21889.jpg" alt="牌子"></p><p><img src="https://bu.dusays.com/2023/12/02/656b2fd90bd67.jpg" alt="有趣的世界地图"></p><h2 id="苦战">苦战</h2><p>当看到 T1 的时候，我的第一反应是昨晚复习的 Trie 树，打完发现大样例答案不对，不管怎么调都是不对，最后就放那了。</p><p>T2, T3 没有思路，骗完分到了 T4，发现可以打暴力，完成暴力之后继续考虑骗分 T2，T3。</p><p>中间有一些小插曲，当时不管我保存文件也好，复制文件也罢，都显示磁盘已满。求助发现是 Vscode 跑满了缓存，耽误了十几分钟。</p><p>听着噼里啪啦的键盘声，压力也攀升到了顶峰，平时的基础欠缺，耽误这么久的不适应，还有能力的不足，在这一刻全部显露。</p><p>结束后，本来以为至少能对一题的，结果发现我似乎看错了 T1 的题面，反复确认后发现并没有，但是内存开大了，爆零。</p><p>一波三折最后折到了谷底。</p><p>我本应该吸取教训的，上一次 CSP 就因为内存开大吃了大亏，然而还是不长记性，直到最后也没看清爆零的结局。</p><p>最后的这一次比赛，就以这样的形式落幕了。</p><h2 id="归程">归程</h2><p><s>别问我为什么用这个小标题</s></p><p>回家的路上感到有些恍惚，这么久以来走过的平静与波折，终于在这一刻结束了。</p><p><img src="https://bu.dusays.com/2023/12/02/656b32648070a.jpg" alt="回程路上窗外的景色"></p><p>或许应该难过吧，但当时只有麻木，不知道该如何是好。</p><hr><p><em><strong>结束了。</strong></em></p><hr><p>回到学校是已是日暮时分，沿着走廊一步步走到尽头，落日的余晖呈现出铁锈一般的颜色</p><p><img src="https://bu.dusays.com/2023/12/02/656b324459339.jpg" alt="铁锈色的落日余晖"></p><p>这也是我 OI 生涯的落幕。</p><h2 id="后记">后记</h2><p>当得知结果时，有些意外，但又感觉早有预料。</p><p>只有 25。</p><p>不管怎样，谢谢 OI。我会记得这几年的每一滴汗水，记得每个深夜，在电脑前翘着代码时的坚定；记得第一次 CSP 过后，照片中我眼中的憧憬。</p><p>再见了，我的 OI 生涯。</p><p>希望 OI 生涯一个不完美的句号，可以成为人生前途的一个逗号。</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>NOIP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP2023 游记</title>
    <link href="/2023/10/20/CSP2023/"/>
    <url>/2023/10/20/CSP2023/</url>
    
    <content type="html"><![CDATA[<p>本来以为就这么退役了，想写退役记的，没想到竟然进了 NOIP，那就改回游记吧……</p><h2 id="前言">前言</h2><p>本次是我两年 AFO 后首次也是最后一次参加 CSP。</p><p>在当初，由于现实条件的束缚，我没有什么学习 OI 的途径，只能依靠自己零零碎碎去大佬的博客学一些东西，也很不成体系，实力也是陷入瓶颈。面对升学的压力，当时的我在权衡后选择放弃 OI，一心高考，也算有点收获。我也稍微学了点化学竞赛，只是为了混个综评，具体可见 <a href="../../../../2023/09/03/2023%E5%8C%96%E5%AD%A6%E5%9B%BD%E5%88%9D%E6%B8%B8%E8%AE%B0">2023化学国初游记</a>.</p><p>后来一想，为什么不再去试试 OI 呢？最后再试一试，反正也没什么亏的。</p><p>已经是高二的我回想起曾经屏幕前的日日夜夜，回想起半夜忍者困意打 CF 比赛，回想起自己曾经的信心，最后还是放不下，决定抱着试一试的心态，再尝试一次，也算是不留遗憾了。</p><p>于是我就试了试。</p><h2 id="初赛前">初赛前</h2><p>在距离暑假还有最后 15 天我才终于下定决心，而我所做的第一件事是看 CCF 新发布的考纲，参照着考纲我制定了突击的计划。我决定先补知识点，然后在初赛前一周做下往年初赛卷。</p><p>完成了第一阶段的计划，接下来遭遇了化学竞赛的考前培训，一直耽搁到 9 月 4 日化学竞赛结束。</p><p>接下来我翻出了<s>尘封已久的</s>初二买的《一本通》初赛篇，上面的题目都是些很老的 NOIP 题目了，期望、博弈论这种现在提高组不考的内容都有。</p><p>把近十年的提高组题目都给做掉了，由于真的很久没有碰过 OI，所以生疏了很多，分数在 60 多到 80 多之间起伏不定。</p><h2 id="初赛">初赛</h2><p>初赛的地点是震泽中学，当天翘掉了第五节生物课及之后的课。</p><p>路上从晴空万里到滂沱大雨，也没睡觉，就在聊天。</p><p>震泽中学里面像公园一样，亭台楼阁都有，羡慕QAQ。</p><p><img src="https://bu.dusays.com/2023/10/29/653e475623a41.jpg" alt="从拍的视频里截取的不太清楚"></p><p>中午没睡觉，考前很困，神奇的是拿到试卷就不困了。</p><hr><p>接下来讲一讲初赛的心态历程（<s>流水账</s>）吧。</p><p>先看了一遍试卷，够呛，好多没见过的题目。做到第 3 题就开始蒙了，第 4 题没看懂题，先跳过了这两题，不过接下来几道就没啥问题了。</p><p>第 10 题有点小坑，好在之前遇到过。</p><p>第 11 题真想吐槽正常人谁会这么写。</p><p>第 14 题啥玩意儿根本看不懂。第 15 题更是坑人，真就 $ O(n) $「快速」幂呗</p><p>前面的选择题只能说是开胃小菜，过不过初赛并不取决于选择题，还得是后面的「阅读理解」和「完形填空」。</p><p>第一道阅读程序难度不大，就是费点时间模拟。</p><p>第二道没读懂，太绕了，耗费了大量时间也没弄明白，导致后面的节奏乱了，很糟糕。</p><p>由于时间不够了，第三道就没时间认真分析了，只能草草蒙完了事。</p><p>后面的完成程序我做得都挺糟糕，第一道思路偏了，第二道完全不懂，一个都没蒙对。</p><p>小图灵估分 69，实际 65，要不是今年江苏统一了，按照苏州的变态分数线根本过不了，可以说是很走运了。</p><h2 id="复赛前">复赛前</h2><p>这段时间我晚自习请了假回家继续 OI，但成效不是很显著。中途还经历了一次月考，<s>考得还不错</s>。</p><p>我知道自己实力不够，考前得知上一年进 NOIP 要 160 分，着实是慌了。</p><p>为了达成目标，考前我制定了一定的战略，比如先打完暴力再想正解，对题目用时也有一定的规划。</p><p>考前一天晚上还打了个线段树裸题练手（<s>虽然并没有用上</s>）</p><h2 id="复赛">复赛</h2><p>又是一次请假（<s>还都是从生物课开始翘</s>）</p><p>和以前参加 CSP 相比真的变化不少，在苏州都有了考点。</p><p><s>这次吸取教训，睡了一路</s></p><p>为了避免犯困，我像参加化学国初一样喝了点咖啡（<s>喝不惯，着实够呛</s>）</p><p>考场条件还蛮好的，VS Code 配置好了插件，按下 F5 点两下就能用了。考前试机的时候我还写了个对拍（<s>忘了对拍咋写了，摸索了半天最后也没写对，不过最后甚至都没用上</s>）</p><p>JS 考场仅提供 NOI Linux 环境，在苏州考点是放在 U 盘里面的，可能是由于 U 盘 IO 性能限制，在打开多个文件的时候会有显著卡顿。</p><hr><p>接下来讲讲做题的经过吧。</p><p>先把 4 道题都扫了一遍，预估一下怎么拿分，发现 T3 是大模拟，有机会做掉,T4 图论，做也要花点时间还不一定能成。于是我打算重点攻破 T3</p><p>T1 我没有想到竟然这么水，直接暴力枚举就行了。我看了几遍题目确保没有理解错题意，最后花了 15 分钟就解决了。</p><p>T2 一眼看去以为是区间 dp，推了个错的式子，然后判了个特殊情况，就跳了，毕竟没啥思路。</p><p>最后悔的一件事就是在 T3 上磕了 3 个小时，我一到考场就忘了之前制定的战略，怀着不该有的自信，想着干掉 T3 就稳了，结果却因此反而达不到预期。</p><p>被监考老师坑到了，还剩一小时十五分钟，他在提醒时间的时候说只剩 15 分钟，慌乱中我对 T3 的代码进行了一些破坏性更改，给 debug 造成了很大的困扰。当然，主要原因还是我的心态问题。</p><p>可惜的是 T4 我甚至一行代码都没写，而 T3 写了 5k+ 字节，改来改去越来越乱，虽然只剩一个操作没完成，但前面已经一团乱了，最后爆零了。</p><p>（有个小插曲，有人考着考着手机响了！没错，他把手机带进来了！随后他就被请出去了）</p><p>结束了，我整个人是筋疲力竭的，已经预料到凶多吉少了。</p><p>（交代码之后有个小学生发现文件夹没建，大寄）</p><h2 id="后记">后记</h2><p>在漆黑的夜幕下，我瘫坐在车上。</p><p>看来这次注定要有遗憾了，路上我思索了很多。</p><p>透过车窗玻璃，我看着远处的城市夜景，和自己的影子。</p><p>要问感受的话，当时并没有什么后悔，更多的只是茫然。</p><p>浑浑噩噩回到家，等民间自测等到半夜。</p><p>云斗统一测完，我都不敢看。果然，T2、T3 爆零，洛谷也是。T2 本来能弄到的部分分，也因为未知原因 RE.</p><p>100pts，NOIP 看来是注定无望。</p><p>云斗的排名让我心凉半截，600 多名，509 个名额，OI 生涯离我远去了。</p><p>结束之后，心里更多是坦然，接下来我就要全力以赴 whk 了，明年 3 月就要和高三一起参加一模了，没了 OI 分散精力，或许在 whk 上我会更好吧。</p><p>这次充分暴露了我的能力和心态问题，以及比赛策略的问题，可惜或许没有补救机会了。</p><hr><p>没想到的是，峰回路转，在已经回归正常学习几天后的 29 日，收到了老师转发的 NOIP 名单，我竟然在里面。<br>这或许是因为我是高二的「大龄选手」，再加上名额里去掉了小学生和初中生吧。<br>不过最主要的原因还是我又一次走运，在官方数据中，我的 T2 通过瞎搞弄到了第一个点的 5pts.</p><p>好吧，那就让我最后再来一次，NOIP RP++！</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>CSP</tag>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[NOIP2022] 种花</title>
    <link href="/2023/10/04/NOIP2022-%E7%A7%8D%E8%8A%B1/"/>
    <url>/2023/10/04/NOIP2022-%E7%A7%8D%E8%8A%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接">题目链接</h2><p><a href="https://www.luogu.com.cn/problem/P8865">洛谷</a></p><p><a href="https://loj.ac/p/3896">LOJ</a></p><h2 id="题目分析">题目分析</h2><h3 id="方法一">方法一</h3><p>以<strong>C-形</strong>为例，想要种出一个<strong>C-形</strong>花需要确定 4 个点，5 个参数，可以使用 5 次循环来讨论这 5 个参数，时间复杂度 $ O(n^5) $， 实际上由于判断了不合法情况，是跑不满的，大约能过 $ n \le 30 $，期望得分 32.</p><h3 id="方法二">方法二</h3><p>在 $ y1 $、 $ y2 $ 向右移动的时候我们发现，我们只关注在某个位置后面有多少连续的 0，这样我们就可以使用后缀和进行预处理，直接得到<strong>C-形</strong>的两横最长能得到的长度，然后依据乘法原理得到方案数，由此节省了两重循环，时间复杂度降至 $ O(n^3) $，可以得到 80 pts. 这种方案对于随机数据由于排除了大量无效点，所以 $ O(n^3) $ 实际上是跑不满的，但遇到大部分为 0 的数据会被卡成 $ O(n^3) $.</p><h3 id="方法三">方法三</h3><p>还是先考虑<strong>C-形</strong>，对于每一个 $ (x1, y0) $ 我们发现，在这个点的方案数等于在 $ x1 $ 下方每一个合法的 $ x2 $ 所能提供的方案数之和。所以可以对每个位置作为 $ x2 $ 时可以提供的总方案数进行后缀和处理，对于方案数 $ sum_c $ 有以下递推式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>c</mi></msub><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.25em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>c</mi></msub><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn><mspace width="1em"/><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>0</mn><mspace width="1em"/><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation}sum_c[i][j] =\left\{    \begin{aligned}    sum_c[i + 1][j] + suf[i][j] - 1 \quad a[i][j] = 1 \\    0 \quad a[i][j] = 0    \end{aligned}    \right.\end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:3.75em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></p><p>其中 $ suf[i][j] $ 在 $ (i, j) $ 后有多少个连续的 0，由于 $ x1 + 1 &lt; x2 $，所以统计的时候不包括本身，要减去 1.</p><p>接下来考虑<strong>F-形</strong>，与<strong>C-形</strong>类似，但多了个尾巴，这个尾巴先进行后缀和处理，得到每个点下方连续 0 的个数 $ down[i][j] $.</p><p>此时每个 $ (x2, y0) $ 的方案数不仅包括向右那一横提供的，还包括尾巴提供的，两者相乘才为这个点实际提供的方案数。$ sum_f $ 的递推式：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>f</mi></msub><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.25em" columnalign="right" columnspacing=""><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>s</mi><mi>u</mi><msub><mi>m</mi><mi>f</mi></msub><mo stretchy="false">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>+</mo><mo stretchy="false">(</mo><mi>s</mi><mi>u</mi><mi>f</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>d</mi><mi>o</mi><mi>w</mi><mi>n</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace width="1em"/><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mn>0</mn><mspace width="1em"/><mi>a</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation}sum_f[i][j] =\left\{    \begin{aligned}    sum_f[i + 1][j] + (suf[i][j] - 1) * (down[i][j] - 1) \quad a[i][j] = 1 \\    0 \quad a[i][j] = 0    \end{aligned}    \right.\end{equation}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:3.75em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">n</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:3.75em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span></span></p><p>这样对于每一个 $ (x1, y0) $，可以在 $ O(1) $ 的时间复杂度下得到该点为左上顶点时的方案数。而讨论每一个位置为左上顶点的时间复杂度为 $ O(n^2) $，前缀和预处理的时间复杂度为 $ O(n^2) $, 所以总时间复杂度为 $ O(n^2) $，可以通过 $ n \le 1000 $，得分 100 pts.</p><h2 id="代码实现">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">998244353</span>;<br><br><span class="hljs-type">int</span> T, id;<br><span class="hljs-type">int</span> n, m, c, f;<br><span class="hljs-type">int</span> ans_c, ans_f;<br><span class="hljs-type">int</span> suf[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-type">int</span> sum_c[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-type">int</span> sum_f[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-type">int</span> down[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><span class="hljs-type">bool</span> a[<span class="hljs-number">1010</span>][<span class="hljs-number">1010</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calc_c</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calc_f</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; T &gt;&gt; id;<br>    <span class="hljs-keyword">while</span> (T--) &#123;<br><br>        <span class="hljs-comment">/* 多组数据切记进行初始化 */</span><br>        ans_c = <span class="hljs-number">0</span>, ans_f = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(suf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(suf));<br>        <span class="hljs-built_in">memset</span>(sum_c, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(sum_c));<br>        <span class="hljs-built_in">memset</span>(sum_f, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(sum_f));<br>        <span class="hljs-built_in">memset</span>(down, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(down));<br><br>        cin &gt;&gt; n &gt;&gt; m &gt;&gt; c &gt;&gt; f;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>                <span class="hljs-type">char</span> ipt;<br>                cin &gt;&gt; ipt;<br>                a[i][j] = ipt - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/* 下面是四次后缀和处理 */</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (a[i][j]) &#123;<br>                    suf[i][j] = <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    suf[i][j] = suf[i][j + <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (a[i][j]) &#123;<br>                    down[i][j] = <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    down[i][j] = down[i + <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (a[i][j]) &#123;<br>                    sum_c[i][j] = <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    sum_c[i][j] = sum_c[i + <span class="hljs-number">1</span>][j] + suf[i][j] - <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = m; j &gt;= <span class="hljs-number">1</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (a[i][j]) &#123;<br>                    sum_f[i][j] = <span class="hljs-number">0</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    sum_f[i][j] = sum_f[i + <span class="hljs-number">1</span>][j] + (suf[i][j] - <span class="hljs-number">1</span>) * (down[i][j] - <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">calc_c</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (f == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">calc_f</span>();<br>        &#125;<br><br>        cout &lt;&lt; ans_c &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans_f &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calc_c</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x1 = <span class="hljs-number">1</span>; x1 &lt;= n; x1++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y0 = <span class="hljs-number">1</span>; y0 &lt; m; y0++) &#123;<br>            <span class="hljs-comment">/* 排除无效情况 */</span><br>            <span class="hljs-keyword">if</span> (a[x1][y0] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (a[x1 + <span class="hljs-number">1</span>][y0] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-comment">/* 注意这里的 y0 + 1 和 x1 + 2 */</span><br>            ans_c = (ans_c + (suf[x1][y0 + <span class="hljs-number">1</span>] * sum_c[x1 + <span class="hljs-number">2</span>][y0]) % mod) % mod;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calc_f</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x1 = <span class="hljs-number">1</span>; x1 &lt;= n; x1++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y0 = <span class="hljs-number">1</span>; y0 &lt; m; y0++) &#123;<br>            <span class="hljs-keyword">if</span> (a[x1][y0] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (a[x1 + <span class="hljs-number">1</span>][y0] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br>            ans_f = (ans_f + (suf[x1][y0 + <span class="hljs-number">1</span>] * sum_f[x1 + <span class="hljs-number">2</span>][y0]) % mod) % mod;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>OI</tag>
      
      <tag>NOIP</tag>
      
      <tag>前缀和</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[NOIP2020] 排水系统</title>
    <link href="/2023/09/27/NOIP2020-%E6%8E%92%E6%B0%B4%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/09/27/NOIP2020-%E6%8E%92%E6%B0%B4%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接">题目链接</h2><p><a href="https://www.luogu.com.cn/problem/P7113">洛谷</a></p><p><a href="https://loj.ac/p/3386">LOJ</a></p><h2 id="题目分析">题目分析</h2><p>注意到，「污水接收口」实际上就是入度为 0 的点，「最终排水口」实际上就是出度为 0 的点。污水先从「污水接收口」流出，然后就与「污水接收口」无关了，而流入某个点的先后顺序与结果无关，并且数据保证为有向无环图，所以可以使用拓扑排序。</p><p>本题的另一个要点是分数的处理，注意在分数相加的时候数字太大会超出 <code>long long</code> 甚至 <code>unsigned long long</code> 的范围，我们需要使用高精度或 <code>__int128</code>， 由于高精度较为复杂，下面的代码实现使用了 <code>__int128</code>。</p><h2 id="代码实现">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> __int128 bint;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Number</span> &#123;<br>    bint p, q;<br><br>    <span class="hljs-comment">/* 约分 */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">simplify</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>        bint g = __gcd(p, q);<br>        p /= g;<br>        q /= g;<br>    &#125;<br><br>    <span class="hljs-built_in">Number</span>()<br>    &#123;<br>        p = <span class="hljs-number">0</span>, q = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> cnt[MAXN];<br><span class="hljs-type">int</span> deg[MAXN];<br>Number w[MAXN];<br>vector&lt;<span class="hljs-type">int</span>&gt; G[MAXN];<br><br><span class="hljs-comment">/* 分数相加 */</span><br><span class="hljs-type">const</span> Number <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> Number a, <span class="hljs-type">const</span> Number b)<br>&#123;<br>    Number tmp;<br>    bint g = __gcd(a.q, b.q);<br>    tmp.q = a.q / g * b.q;<br>    tmp.p = tmp.q / a.q * a.p + tmp.q / b.q * b.p;<br>    tmp.<span class="hljs-built_in">simplify</span>();<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br><span class="hljs-comment">/* 用于输出 __int128 */</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">write</span><span class="hljs-params">(bint x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">9</span>) <span class="hljs-built_in">write</span>(x / <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">putchar</span>(x % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; cnt[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= cnt[i]; j++) &#123;<br>            <span class="hljs-type">int</span> to;<br>            cin &gt;&gt; to;<br>            G[i].<span class="hljs-built_in">push_back</span>(to);<br>            deg[to]++;<br>        &#125;<br>    &#125;<br><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-comment">//对于每个污水接收口，初始化污水为 1 吨</span><br>        w[i].p = w[i].q = <span class="hljs-number">1</span>;<br>        q.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br><br>        <span class="hljs-comment">// 得到每根管道分得的污水量</span><br>        Number now = w[x];<br>        bint g = __gcd(<span class="hljs-built_in">bint</span>(cnt[x]), now.p);<br>        now.p /= g;<br>        now.q *= cnt[x] / g;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> to : G[x]) &#123;<br>            deg[to]--;<br>            <span class="hljs-keyword">if</span> (deg[to] == <span class="hljs-number">0</span>) &#123;<br>                q.<span class="hljs-built_in">push</span>(to);<br>            &#125;<br><br>            <span class="hljs-comment">// 排出污水，进行累加</span><br>            w[to] = now + w[to];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (cnt[i] == <span class="hljs-number">0</span>) &#123;<br>            w[i].<span class="hljs-built_in">simplify</span>();<br>            <span class="hljs-built_in">write</span>(w[i].p);<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>            <span class="hljs-built_in">write</span>(w[i].q);<br>            <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>NOIP</tag>
      
      <tag>拓扑排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[NOIP2013] 货车运输</title>
    <link href="/2023/09/10/NOIP2013-%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/"/>
    <url>/2023/09/10/NOIP2013-%E8%B4%A7%E8%BD%A6%E8%BF%90%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接">题目链接</h2><p><a href="https://www.luogu.com.cn/problem/P1967">洛谷</a></p><p><a href="https://loj.ac/p/2610">LOJ</a></p><h2 id="题目分析">题目分析</h2><p>如果两座城市之间有多条路径可以相互到达，我们会选择路径中最小值最大的，其他较次的方案会被抛弃，最后得到的就是这张图的最大生成树。</p><p>得到最大生成树之后，对于任意一次查询，我们找一个点让这两个点都能到达，路径上的最小值即为答案。不难想到可以用 LCA 来实现，本题似乎不用倍增也能跑得很快，但我还是用的倍增。</p><p>对于求最大生成树，我用了 Prim 来实现。本题城市群之间可能不联通，在求 LCA 之前的 dfs 可以先进行染色，如果询问中的两座城市颜色不一样那就不联通。</p><h2 id="代码实现">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1000010</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> id, dis, from;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    <span class="hljs-type">int</span> nxt;<br>    <span class="hljs-type">int</span> to;<br>    <span class="hljs-type">int</span> w;<br>    <span class="hljs-type">bool</span> vis;<br>&#125; edge[MAXN * <span class="hljs-number">2</span>];<br>priority_queue&lt;Node&gt; q;<br><span class="hljs-type">int</span> head[MAXN], cnt;<br><span class="hljs-type">int</span> N, M, Q;<br><span class="hljs-type">int</span> minn[MAXN][<span class="hljs-number">21</span>];<span class="hljs-comment">//minn[i][j]记录从i往上跳2^j个点的最大限重</span><br><span class="hljs-type">int</span> fa[MAXN][<span class="hljs-number">21</span>], dep[MAXN];<br><br><span class="hljs-keyword">namespace</span> Prim<br>&#123;<br>    <span class="hljs-type">int</span> vis[MAXN];<br>&#125;<span class="hljs-comment">// namespace Prim</span><br><br><span class="hljs-keyword">namespace</span> LCA<br>&#123;<br>    <span class="hljs-type">int</span> col[MAXN];<br>    <span class="hljs-type">int</span> cnt;<br>&#125;<span class="hljs-comment">// namespace LCA</span><br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Node&amp; a, <span class="hljs-type">const</span> Node&amp; b)<br>&#123;<br>    <span class="hljs-keyword">return</span> a.dis &lt; b.dis;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">link</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    edge[++cnt].nxt = head[u];<br>    edge[cnt].to = v;<br>    edge[cnt].w = w;<br>    head[u] = cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">prim</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>        <span class="hljs-keyword">if</span> (Prim::vis[i]) <span class="hljs-keyword">continue</span>;<br>        q.<span class="hljs-built_in">push</span>(Node&#123;i, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            Node u = q.<span class="hljs-built_in">top</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (Prim::vis[u.id]) <span class="hljs-keyword">continue</span>;<br>            Prim::vis[u.id] = <span class="hljs-number">1</span>;<br><br>            edge[u.from].vis = <span class="hljs-number">1</span>;                    <span class="hljs-comment">//记录该边属于最大生成树</span><br>            <span class="hljs-keyword">if</span> (u.from &amp; <span class="hljs-number">1</span>) &#123;<br>                edge[u.from + <span class="hljs-number">1</span>].vis = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                edge[u.from - <span class="hljs-number">1</span>].vis = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-comment">//双向边</span><br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[u.id]; i; i = edge[i].nxt) &#123;<br>                <span class="hljs-type">int</span> to = edge[i].to;<br>                <span class="hljs-type">int</span> w = edge[i].w;<br>                <span class="hljs-type">int</span> from = i;<br>                <span class="hljs-keyword">if</span> (Prim::vis[to]) <span class="hljs-keyword">continue</span>;<br>                q.<span class="hljs-built_in">push</span>(Node&#123;to, w, from&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> father, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (LCA::col[x]) <span class="hljs-keyword">return</span>;<br>    LCA::col[x] = col;<span class="hljs-comment">//染色</span><br>    fa[x][<span class="hljs-number">0</span>] = father;<br>    minn[x][<span class="hljs-number">0</span>] = w;<span class="hljs-comment">//到父节点的minn就是到父节点的边的长度</span><br>    dep[x] = dep[father] + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= dep[x]; i++) &#123;<br>        fa[x][i] = fa[fa[x][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>        minn[x][i] = <span class="hljs-built_in">min</span>(minn[x][i - <span class="hljs-number">1</span>], minn[fa[x][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>]);<span class="hljs-comment">//倍增求最小边长</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = head[x]; i; i = edge[i].nxt) &#123;<br>        <span class="hljs-type">int</span> to = edge[i].to;<br>        <span class="hljs-type">int</span> cw = edge[i].w;<br>        <span class="hljs-keyword">if</span> (to == father) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (!edge[i].vis) <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//必须是最大生成树上有的边</span><br>        <span class="hljs-built_in">dfs</span>(to, x, cw, col);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getlca</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (LCA::col[a] != LCA::col[b]) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0x7fffffff</span>;<br>    <span class="hljs-keyword">if</span> (dep[a] &lt; dep[b]) <span class="hljs-built_in">swap</span>(a, b);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (dep[a] - (<span class="hljs-number">1</span> &lt;&lt; i) &gt;= dep[b]) &#123;<br>            ans = <span class="hljs-built_in">min</span>(ans, minn[a][i]);<br>            a = fa[a][i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (a == b) <span class="hljs-keyword">return</span> ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">20</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (fa[a][i] == fa[b][i]) <span class="hljs-keyword">continue</span>;<br><br>        ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">min</span>(minn[a][i], minn[b][i]));<br>        a = fa[a][i], b = fa[b][i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">min</span>(minn[a][<span class="hljs-number">0</span>], minn[b][<span class="hljs-number">0</span>]));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; N &gt;&gt; M;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= M; i++) &#123;<br>        <span class="hljs-type">int</span> u, v, w;<br>        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>        <span class="hljs-built_in">link</span>(u, v, w);<br>        <span class="hljs-built_in">link</span>(v, u, w);<br>    &#125;<br>    <span class="hljs-comment">//使用prim求最大生成树</span><br>    <span class="hljs-built_in">prim</span>();<br><br>    cin &gt;&gt; Q;<br>    <span class="hljs-comment">//倍增LCA</span><br>    <span class="hljs-built_in">memset</span>(minn, <span class="hljs-number">0x3f</span>, <span class="hljs-built_in">sizeof</span>(minn));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= N; i++) &#123;<br>        <span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, ++LCA::cnt);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= Q; i++) &#123;<br>        <span class="hljs-type">int</span> a, b;<br>        cin &gt;&gt; a &gt;&gt; b;<br>        cout &lt;&lt; <span class="hljs-built_in">getlca</span>(a, b) &lt;&lt; endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>OI</tag>
      
      <tag>NOIP</tag>
      
      <tag>LCA</tag>
      
      <tag>Prim</tag>
      
      <tag>最小生成树</tag>
      
      <tag>最近公共祖先</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023 化学国初游记</title>
    <link href="/2023/09/03/2023%E5%8C%96%E5%AD%A6%E5%9B%BD%E5%88%9D%E6%B8%B8%E8%AE%B0/"/>
    <url>/2023/09/03/2023%E5%8C%96%E5%AD%A6%E5%9B%BD%E5%88%9D%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>时间：2023 年 9 月 3 日</p><p>地点：南师大仙林校区</p><h2 id="出发前">出发前</h2><p>被迫坐了一上午物理预赛的牢，啥都没学过就去考，当分母喽。</p><p>中午食堂的饭菜估计有问题，肚子吃得难受。</p><h2 id="出发，前往南师大">出发，前往南师大</h2><p>学校包的 20 多个座的车，真的颠得慌，去的路上胃就难受，还拉肚子(⊙︿⊙)</p><p>好不容易才撑到了南师大门口，不巧的是南师大新生报到，不让进去看考场，饭也没法去南师大食堂吃了。</p><p><img src="https://bu.dusays.com/2023/09/03/64f47e6af08b5.jpg" alt="南师大仙林校区门口"></p><p>不得不说南师大真的偏，附近一公里都没啥吃的地方，只能去某个看上去就很阴间的地方吃了一顿。</p><p><img src="https://bu.dusays.com/2023/09/03/64f47e6b59111.jpg" alt="去那边厕所的路上，一看就很阴间"></p><p><img src="https://bu.dusays.com/2023/09/03/64f47e4c27dd7.jpg" alt="第一天晚上的饭"></p><p>晚上住的汉庭，灯光很暗，只能摸鱼了（逃</p><h2 id="早早地起来，迎接一天的折腾">早早地起来，迎接一天的折腾</h2><p>6点整，闹钟一响就能起来，说明昨晚睡得不错 (〃‘▽’〃)</p><p>早餐很不错，很丰富，也蛮好吃的。 <s>吃了好多鸡米花</s></p><p>虽然不困，但还是喝了杯咖啡。 <s>第一次喝，味道好冲</s></p><p>好了，该<s>上路</s>出发啦！</p><p>又回到了<s>偏僻的</s>南师大，有学校来的更早，还对着我们拍照 <s>不能输，所以我拍了回去</s></p><p><img src="https://bu.dusays.com/2023/09/03/64f4808faf49b.jpg" alt="对面学校"></p><h2 id="迎战国初卷">迎战国初卷</h2><p><img src="https://bu.dusays.com/2023/09/03/64f47e694f499.jpg" alt="横幅"></p><p>先去踩了个考场 <s>后来被赶出来了</s></p><p>前面坐了个看上去很成熟的姐姐QAQ</p><p>我这样一个没学过几天化学竞赛的蒟蒻，只是来当分母的罢了 ╮(╯▽╰)╭</p><p>没想到第一题不是化学方程式了，直接给我干蒙了，想了半天写不出来，先看第二题了。</p><p>结果第二题还是不会，半天算不出来，算了，继续往下</p><p>第三题起码能写一写，但是第四题就写不出来了，凑了半天没凑出来。</p><p>第五题竟然有 32 分，题目背景也蛮有意思的：</p><blockquote><p>同为常见小分子，NO 星光熠熠，H2S 却臭名昭著</p></blockquote><p><s>硫化氢：我招谁惹谁了</s></p><p>接下来的晶体结构我就没学明白过，不过也认认真真蒙了一下。</p><p>学了这么久生物，至今不知道为什么离子透不过磷脂双分子层 <s>白学了</s></p><p>计算题，算出来脂质体半径 $ 10^5 m $, 标准摩尔焓变写了个 0，感觉写得好离谱。</p><p>做到有机的时候还剩 15 分钟 <s>反正也没学过有机</s></p><p>第一题很友好，能让我这种啥都不会的乱蒙<s>看运气了</s>，问我构型我直接 $ SSR $，貌似对了两个？反正有机尽量瞎涂了涂，问我机理我也不会，只能用白卷表达我的无奈了。</p><h2 id="悲剧的结束，新噩梦的开始">悲剧的结束，新噩梦的开始</h2><p>虽然内心是抗拒的，但还是到了昨天的餐馆吃饭TAT。</p><p><img src="https://bu.dusays.com/2023/09/03/64f47e4997446.jpg" alt="第二天中午的饭"></p><p>坐上车胃里就翻江倒海，撑了好久到了服务区。想着终于能好一点了，不过一下车就撑不住了，只感觉天旋地转，眼冒金星，低下头吐了个稀里哗啦。<s>上面那张图里的全被我吐了出来</s></p><p>路上还堵车，一直到快 7 点才到学校。回去拿作业<s>回归礼包</s></p><p><img src="https://bu.dusays.com/2023/09/03/64f4869e2eab3.jpg" alt="回归礼包"></p><h2 id="后记">后记</h2><p>虽然我菜，但我仍然想写游记，留下一份回忆嘛。<s>作业都不写就来写游记</s></p><p>以前删掉的 CSP 游记之前又被我放回来了，想想也是，有什么理由要删掉呢。虽然现在留下了不少悔恨，但也不能就因为这个否定当时的美好回忆啊。</p><p>文化课落下了不少，CSP-S 初赛又近在眼前了，矛盾很多，压力很大，我能做的就是认真走好每一步，不留下遗憾就很好了。</p><p>化学答案还没对，不过毕竟不在乎这些，等出成绩再更新吧，就这样，写作业去了。</p><hr><p>最后情况也蛮出乎意料的，学了半个月化学竞赛就混了个真省二，假省一（江苏特色），也算是不亏了。</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>化学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写给自己</title>
    <link href="/2023/08/29/TOMYSELF/"/>
    <url>/2023/08/29/TOMYSELF/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4c2fddaa1a5e733ecb0e04e8e034dee01b842ae4ecab57691ab69c6bf833fd81"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是写给我自己看的哦~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>[SCOI2010] 序列操作</title>
    <link href="/2023/08/27/SCOI2010-%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/08/27/SCOI2010-%E5%BA%8F%E5%88%97%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接">题目链接</h2><p><a href="https://www.luogu.com.cn/problem/P2572">洛谷</a></p><h2 id="题目分析">题目分析</h2><div class="note note-warning">            <p>本题可能需要亿点耐心</p>          </div><p>题目要求支持五个操作</p><ol><li>区间填充为 0</li><li>区间填充为 1</li><li>区间取反</li><li>区间求和</li><li>求区间最多有多少个连续的 1</li></ol><p>先忽略操作 5，对于操作 1-4，取反和填充设置两个 $ lazytag $，在操作时，如果另一类操作已经有了 $ lazytag $，就把另一类操作应用下去，先填充再取反。</p><p>操作 5 比较麻烦，先看下面这张图。</p><p><img src="https://bu.dusays.com/2023/08/27/64eb59403a8c2.png" alt="区间合并示意图"></p><p>如图所示，区间 $ a $ 和 $ b $ 合并为区间 $ c $，红色的区域代表连续的 1，可以看到</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>c</mi></msub><mo>=</mo><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>a</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation*}pre_c = pre_a\end{equation*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>s</mi><mi>u</mi><msub><mi>f</mi><mi>c</mi></msub><mo>=</mo><mi>s</mi><mi>u</mi><msub><mi>f</mi><mi>b</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation*}suf_c = suf_b\end{equation*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><msub><mi>l</mi><mi>c</mi></msub><mo>=</mo><mi>max</mi><mo>⁡</mo><mo stretchy="false">{</mo><mi>m</mi><mi>a</mi><mi>x</mi><msub><mi>l</mi><mi>a</mi></msub><mo separator="true">,</mo><mi>m</mi><mi>a</mi><mi>x</mi><msub><mi>l</mi><mi>b</mi></msub><mo separator="true">,</mo><mi>s</mi><mi>u</mi><msub><mi>f</mi><mi>a</mi></msub><mo>+</mo><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>b</mi></msub><mo stretchy="false">}</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{equation*}maxl_c = \max \{maxl_a,maxl_b,suf_a+pre_b\}\end{equation*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2em;vertical-align:-0.35em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85em;"><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">c</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop">max</span><span class="mopen">{</span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">u</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>关于 $ pre_c $ 和 $ suf_c $ ，可能并不止那么简单，因为 $ a $ 和 $ b $ 可能是全 1 序列，会导致贯通，还需要判断一下。</p><p>由于有取反操作，对于每个区间，我们不仅维护关于 1 的 $ pre $ 、$ sur $ 、$ maxl $ 三个数据，还要维护关于 0 的才能完成操作 5.</p><h2 id="代码实现">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100010</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> l, r;<br>    <span class="hljs-type">int</span> sum;<br>    <span class="hljs-type">int</span> maxl1, pre1, suf1;<br>    <span class="hljs-type">int</span> maxl0, pre0, suf0;<br>    <span class="hljs-type">int</span> filltag;<br>    <span class="hljs-type">bool</span> invertag;<br>&#125; tree[N * <span class="hljs-number">4</span>];<br><span class="hljs-type">int</span> num[N];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">size</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> tree[x].r - tree[x].l + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-type">const</span> Node&amp; l, <span class="hljs-type">const</span> Node&amp; r, Node&amp; ori)</span></span><br><span class="hljs-function"></span>&#123;<br>    ori.sum = l.sum + r.sum;<br><br>    ori.pre1 = l.pre1;<br>    <span class="hljs-keyword">if</span> (l.pre1 == l.r - l.l + <span class="hljs-number">1</span>) ori.pre1 += r.pre1;<br>    ori.suf1 = r.suf1;<br>    <span class="hljs-keyword">if</span> (r.suf1 == r.r - r.l + <span class="hljs-number">1</span>) ori.suf1 += l.suf1;<br>    ori.maxl1 = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(l.maxl1, r.maxl1), l.suf1 + r.pre1);<br><br>    ori.pre0 = l.pre0;<br>    <span class="hljs-keyword">if</span> (l.pre0 == l.r - l.l + <span class="hljs-number">1</span>) ori.pre0 += r.pre0;<br>    ori.suf0 = r.suf0;<br>    <span class="hljs-keyword">if</span> (r.suf0 == r.r - r.l + <span class="hljs-number">1</span>) ori.suf0 += l.suf0;<br>    ori.maxl0 = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(l.maxl0, r.maxl0), l.suf0 + r.pre0);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">push_up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">merge</span>(tree[x &lt;&lt; <span class="hljs-number">1</span>], tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>], tree[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">push_down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x].filltag == <span class="hljs-number">1</span>) &#123;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].filltag = <span class="hljs-number">1</span>, tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].filltag = <span class="hljs-number">1</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].invertag = <span class="hljs-number">0</span>, tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].invertag = <span class="hljs-number">0</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].pre1 = tree[x &lt;&lt; <span class="hljs-number">1</span>].suf1 = tree[x &lt;&lt; <span class="hljs-number">1</span>].maxl1 = <span class="hljs-built_in">size</span>(x &lt;&lt; <span class="hljs-number">1</span>);<br>        tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].pre1 = tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].suf1 = tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxl1 = <span class="hljs-built_in">size</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].pre0 = tree[x &lt;&lt; <span class="hljs-number">1</span>].suf0 = tree[x &lt;&lt; <span class="hljs-number">1</span>].maxl0 = <span class="hljs-number">0</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].pre0 = tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].suf0 = tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxl0 = <span class="hljs-number">0</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].sum = <span class="hljs-built_in">size</span>(x &lt;&lt; <span class="hljs-number">1</span>);<br>        tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum = <span class="hljs-built_in">size</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>        tree[x].filltag = <span class="hljs-number">-1</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tree[x].filltag == <span class="hljs-number">0</span>) &#123;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].filltag = <span class="hljs-number">0</span>, tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].filltag = <span class="hljs-number">0</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].invertag = <span class="hljs-number">0</span>, tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].invertag = <span class="hljs-number">0</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].pre1 = tree[x &lt;&lt; <span class="hljs-number">1</span>].suf1 = tree[x &lt;&lt; <span class="hljs-number">1</span>].maxl1 = <span class="hljs-number">0</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].pre1 = tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].suf1 = tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxl1 = <span class="hljs-number">0</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].pre0 = tree[x &lt;&lt; <span class="hljs-number">1</span>].suf0 = tree[x &lt;&lt; <span class="hljs-number">1</span>].maxl0 = <span class="hljs-built_in">size</span>(x &lt;&lt; <span class="hljs-number">1</span>);<br>        tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].pre0 = tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].suf0 = tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxl0 = <span class="hljs-built_in">size</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].sum = <span class="hljs-number">0</span>;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum = <span class="hljs-number">0</span>;<br>        tree[x].filltag = <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tree[x].invertag) &#123;<br>        <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span>].filltag != <span class="hljs-number">-1</span>) <span class="hljs-built_in">push_down</span>(x &lt;&lt; <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].filltag != <span class="hljs-number">-1</span>) <span class="hljs-built_in">push_down</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">swap</span>(tree[x &lt;&lt; <span class="hljs-number">1</span>].maxl0, tree[x &lt;&lt; <span class="hljs-number">1</span>].maxl1);<br>        <span class="hljs-built_in">swap</span>(tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxl0, tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].maxl1);<br>        <span class="hljs-built_in">swap</span>(tree[x &lt;&lt; <span class="hljs-number">1</span>].pre0, tree[x &lt;&lt; <span class="hljs-number">1</span>].pre1);<br>        <span class="hljs-built_in">swap</span>(tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].pre0, tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].pre1);<br>        <span class="hljs-built_in">swap</span>(tree[x &lt;&lt; <span class="hljs-number">1</span>].suf0, tree[x &lt;&lt; <span class="hljs-number">1</span>].suf1);<br>        <span class="hljs-built_in">swap</span>(tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].suf0, tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].suf1);<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].invertag = !tree[x &lt;&lt; <span class="hljs-number">1</span>].invertag;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].invertag = !tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].invertag;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span>].sum = <span class="hljs-built_in">size</span>(x &lt;&lt; <span class="hljs-number">1</span>) - tree[x &lt;&lt; <span class="hljs-number">1</span>].sum;<br>        tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum = <span class="hljs-built_in">size</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>) - tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].sum;<br>        tree[x].invertag = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    tree[x].l = l, tree[x].r = r;<br>    tree[x].filltag = <span class="hljs-number">-1</span>, tree[x].invertag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tree[x].sum = num[l];<br>        tree[x].pre1 = num[l];<br>        tree[x].suf1 = num[l];<br>        tree[x].maxl1 = num[l];<br>        tree[x].pre0 = !num[l];<br>        tree[x].suf0 = !num[l];<br>        tree[x].maxl0 = !num[l];<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">build</span>(x &lt;&lt; <span class="hljs-number">1</span>, l, mid);<br>    <span class="hljs-built_in">build</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">push_up</span>(x);<br>&#125;<br><br><span class="hljs-comment">// 1 的总和</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt; r || tree[x].r &lt; l) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt;= l &amp;&amp; tree[x].r &lt;= r) &#123;<br>        <span class="hljs-keyword">return</span> tree[x].sum;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(x);<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span>].r &gt;= l) ans += <span class="hljs-built_in">sum</span>(x &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l &lt;= r) ans += <span class="hljs-built_in">sum</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">// 全覆盖为 0</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">zero_fill</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt; r || tree[x].r &lt; l) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt;= l &amp;&amp; tree[x].r &lt;= r) &#123;<br>        <span class="hljs-built_in">push_down</span>(x);<br>        tree[x].filltag = <span class="hljs-number">0</span>;<br>        tree[x].sum = <span class="hljs-number">0</span>;<br>        tree[x].pre1 = tree[x].suf1 = tree[x].maxl1 = <span class="hljs-number">0</span>;<br>        tree[x].pre0 = tree[x].suf0 = tree[x].maxl0 = <span class="hljs-built_in">size</span>(x);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(x);<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span>].r &gt;= l) <span class="hljs-built_in">zero_fill</span>(x &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l &lt;= r) <span class="hljs-built_in">zero_fill</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-built_in">push_up</span>(x);<br>&#125;<br><br><span class="hljs-comment">// 全覆盖为 1</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">one_fill</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt; r || tree[x].r &lt; l) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt;= l &amp;&amp; tree[x].r &lt;= r) &#123;<br>        <span class="hljs-built_in">push_down</span>(x);<br>        tree[x].filltag = <span class="hljs-number">1</span>;<br>        tree[x].sum = <span class="hljs-built_in">size</span>(x);<br>        tree[x].pre1 = tree[x].suf1 = tree[x].maxl1 = <span class="hljs-built_in">size</span>(x);<br>        tree[x].pre0 = tree[x].suf0 = tree[x].maxl0 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(x);<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span>].r &gt;= l) <span class="hljs-built_in">one_fill</span>(x &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l &lt;= r) <span class="hljs-built_in">one_fill</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-built_in">push_up</span>(x);<br>&#125;<br><br><span class="hljs-comment">// 取反</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inverse</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt; r || tree[x].r &lt; l) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt;= l &amp;&amp; tree[x].r &lt;= r) &#123;<br>        <span class="hljs-built_in">push_down</span>(x);<br>        tree[x].invertag = !tree[x].invertag;<span class="hljs-comment">// 没取反就记取反，两次取反等于不取反</span><br>        tree[x].sum = <span class="hljs-built_in">size</span>(x) - tree[x].sum;<br>        <span class="hljs-built_in">swap</span>(tree[x].maxl0, tree[x].maxl1);<br>        <span class="hljs-built_in">swap</span>(tree[x].pre0, tree[x].pre1);<br>        <span class="hljs-built_in">swap</span>(tree[x].suf0, tree[x].suf1);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(x);<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span>].r &gt;= l) <span class="hljs-built_in">inverse</span>(x &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l &lt;= r) <span class="hljs-built_in">inverse</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-built_in">push_up</span>(x);<br>&#125;<br><br><span class="hljs-comment">// 查找最长的连续的 1</span><br><span class="hljs-function">Node <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt; r || tree[x].r &lt; l) &#123;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (tree[x].l &gt;= l &amp;&amp; tree[x].r &lt;= r) &#123;<br>        <span class="hljs-keyword">return</span> tree[x];<br>    &#125;<br>    <span class="hljs-built_in">push_down</span>(x);<br>    Node a&#123;&#125;, b&#123;&#125;, ans&#123;&#125;;<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span>].r &gt;= l) a = <span class="hljs-built_in">query</span>(x &lt;&lt; <span class="hljs-number">1</span>, l, r);<br>    <span class="hljs-keyword">if</span> (tree[x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>].l &lt;= r) b = <span class="hljs-built_in">query</span>(x &lt;&lt; <span class="hljs-number">1</span> | <span class="hljs-number">1</span>, l, r);<br><br>    <span class="hljs-built_in">merge</span>(a, b, ans);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>), cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; num[i];<br>    &#125;<br>    <span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-type">int</span> op, l, r;<br>        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r;<br>        l++, r++;<br>        <span class="hljs-keyword">switch</span> (op) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>: &#123;<br>            <span class="hljs-built_in">zero_fill</span>(<span class="hljs-number">1</span>, l, r);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: &#123;<br>            <span class="hljs-built_in">one_fill</span>(<span class="hljs-number">1</span>, l, r);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: &#123;<br>            <span class="hljs-built_in">inverse</span>(<span class="hljs-number">1</span>, l, r);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: &#123;<br>            cout &lt;&lt; <span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, l, r) &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: &#123;<br>            cout &lt;&lt; <span class="hljs-built_in">query</span>(<span class="hljs-number">1</span>, l, r).maxl1 &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>省选</tag>
      
      <tag>OI</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[SCOI2015] 国旗计划</title>
    <link href="/2023/08/25/SCOI2015-%E5%9B%BD%E6%97%97%E8%AE%A1%E5%88%92/"/>
    <url>/2023/08/25/SCOI2015-%E5%9B%BD%E6%97%97%E8%AE%A1%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接">题目链接</h2><p><a href="https://www.luogu.com.cn/problem/P4155">洛谷</a></p><p><a href="https://loj.ac/p/2007">LOJ</a></p><h2 id="题目分析">题目分析</h2><p>题意转化为：当必须使用某一条线段时，求覆盖区间至少需要用到的线段数量。</p><p>首先题目里出现了环，由于不好处理我们将其拆开成链。</p><p>这种区间覆盖问题我们可以使用贪心，根据左端点排序后由于线段不互相包含所以右端单调递增。对于某一条线段，选择最左端在该线段覆盖范围内且最靠右的线段可以使覆盖最优。</p><p>而如果暴力去做，由于线段数量能达到 $ 200000 $，每一条线段都要一条条判断下去会超时。这种情况下可以使用倍增进行优化。</p><p>定义 $ jump[i][j] $ 为第 $ i $ 条线段后跳过 $ 2^j $ 条线段后到达的线段，有：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>j</mi><mi>u</mi><mi>m</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mi>j</mi><mi>u</mi><mi>m</mi><mi>p</mi><mo stretchy="false">[</mo><mi>j</mi><mi>u</mi><mi>m</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">jump[i][j] = jump[jump[i][j-1]][j-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></span></p><p>其中 $ jump[i][j-1] $ 是跳了一半的位置，在此基础上再跳那么长就是跳 $ 2^j $ 之后的了。</p><p>!!! caution<br>$ 2^j $ 是中间线段的数量，统计的时候还要加上起跳的线段和到达的线段。</p><h2 id="代码实现">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> l, r;<br>&#125;;<br><br>Node w[<span class="hljs-number">400010</span>];<br><span class="hljs-type">int</span> jump[<span class="hljs-number">400010</span>][<span class="hljs-number">20</span>];<br><span class="hljs-type">int</span> ans[<span class="hljs-number">200010</span>];<br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> Node&amp; a, <span class="hljs-type">const</span> Node&amp; b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a.l &lt; b.l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pre</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> nxt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n * <span class="hljs-number">2</span>; i++) &#123;<br>        <span class="hljs-comment">//由于已经按照左端点排序并且保证区间不重合，此处不需要将 nxt 重设为 1</span><br>        <span class="hljs-keyword">while</span> (nxt &lt;= n * <span class="hljs-number">2</span> &amp;&amp; w[nxt].l &lt;= w[i].r) &#123;<br>            nxt++;<br>        &#125;<br>        jump[i][<span class="hljs-number">0</span>] = nxt - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; (<span class="hljs-number">1</span> &lt;&lt; i) &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> s = n * <span class="hljs-number">2</span>; s &gt;= <span class="hljs-number">1</span>; s--) &#123;<br>            <span class="hljs-comment">// s 循环的正反无所谓，因为使用的是跳了一半的数据，与此层 s 无关</span><br>            jump[s][i] = jump[jump[s][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> end = w[x].l + m;<span class="hljs-comment">// 这一圈的结束，下一圈的开始</span><br>    <span class="hljs-type">int</span> cur = x;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">log2</span>(n); i &gt;= <span class="hljs-number">0</span>; i--) &#123;<span class="hljs-comment">// 2^i 代表一次跳几个边防站</span><br>        <span class="hljs-type">int</span> pos = jump[cur][i];<br>        <span class="hljs-keyword">if</span> (w[pos].r &lt; end) &#123;<span class="hljs-comment">//判断是否完成覆盖</span><br>            <span class="hljs-keyword">if</span> (pos) &#123;<br>                ans += <span class="hljs-number">1</span> &lt;&lt; i;<br>                cur = pos;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (pos &amp;&amp; w[pos].r &lt; end) &#123;<br>            ans += <span class="hljs-number">1</span> &lt;&lt; i;<br>            cur = pos;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// ans 倍增过程中跳过的线段，要想圆满覆盖还要加上自己本身和最后一根线段</span><br>    <span class="hljs-keyword">return</span> ans + <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; w[i].l &gt;&gt; w[i].r;<br>        w[i].id = i;<br>        <span class="hljs-keyword">if</span> (w[i].r &lt; w[i].l) w[i].r += m;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(w + <span class="hljs-number">1</span>, w + n + <span class="hljs-number">1</span>, cmp); <span class="hljs-comment">//按照左端点排序以便贪心</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        w[n + i].id = w[i].id;<br>        w[n + i].l = w[i].l + m;<br>        w[n + i].r = w[i].r + m;<br>    &#125;<br>    <span class="hljs-built_in">pre</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        ans[w[i].id] = <span class="hljs-built_in">query</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cout &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>省选</tag>
      
      <tag>OI</tag>
      
      <tag>倍增</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[AHOI2012] 铁盘整理</title>
    <link href="/2023/08/24/AHOI2012-%E9%93%81%E7%9B%98%E6%95%B4%E7%90%86/"/>
    <url>/2023/08/24/AHOI2012-%E9%93%81%E7%9B%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接">题目链接</h2><p><a href="https://www.luogu.com.cn/problem/P2534">洛谷</a></p><h2 id="题目分析">题目分析</h2><p>首先 $ N $ 的值较小，考虑进行搜索。</p><p>该题求的是最小翻转次数，次数是不确定的，并且可能会搜索很多次无功而返，搜索树会很深，如果一直搜下去容易超时，所以考虑迭代加深搜索。</p><p>而该题如果暴力搜索会超时，对于 IDDFS，我们可以使用估价函数进行剪枝，将其升级为 IDA*。</p><p>我们需要用估计函数来估计期望最小翻转次数，如果在期望的最少次数内需要的次数超过此次迭代的搜索深度上限，就肯定无法完成了，不用继续搜索下去了。</p><p>那么该如何设计估价函数呢？</p><p>记 $ a_{i} $ 为第 $ i $ 个铁盘应当处于的位置，如果 $ |a_{i} - a_{i-1}| = 1 $，那么 $ a_{i} $ 和 $ a_{i-1} $ 就有可能是连续的（即 $ a_{i-1} + 1 = a_{i} $ ），应当作为整体翻转。而当 $ a_{i-1} = a_{i} + 1 $ 时，两个数字是倒着的，至少要一次翻转。不过，估价函数是用来剪枝的，可以不剪得那么精确，这种情况下可以不对期望最小翻转次数进行更改。当 $ |a_{i} - a_{i-1}| &gt; 1 $ 时，这两个数一定要让它们分开，期望翻转次数需要加一。</p><h2 id="代码实现">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> num[<span class="hljs-number">105</span>];<br><span class="hljs-type">int</span> id[<span class="hljs-number">105</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> num[a] &lt; num[b];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = l, j = r; i &lt;= j; i++, j--) &#123;<br>        <span class="hljs-built_in">swap</span>(num[i], num[j]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evaluate</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(num[i] - num[i - <span class="hljs-number">1</span>]) != <span class="hljs-number">1</span>) cnt++;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    注意当第一个元素不为 1 时也会让最小期望翻转次数加一</span><br><span class="hljs-comment">    但第一个元素不应和不存在的第 0 个元素一起翻转</span><br><span class="hljs-comment">    所以应当减去 1</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">return</span> cnt - <span class="hljs-number">1</span>; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> depth, <span class="hljs-type">int</span> maxd)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (depth &gt; maxd) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> v = <span class="hljs-built_in">evaluate</span>();<br>    <span class="hljs-keyword">if</span> (depth + v &gt; maxd) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">bool</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<span class="hljs-comment">//从最底层开始，优化搜索顺序</span><br>        <span class="hljs-keyword">if</span> (num[i] == i &amp;&amp; flag) &#123;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">continue</span>;<span class="hljs-comment">//已经有序的不用继续排了</span><br>        &#125;<br>        flag = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">reverse</span>(<span class="hljs-number">1</span>, i);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(depth + <span class="hljs-number">1</span>, maxd)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(<span class="hljs-number">1</span>, i);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; num[i];<br>        id[i] = i;<br>    &#125;<br><br>    <span class="hljs-comment">//离散化操作，将铁盘半径转化为应当处于的位置</span><br>    <span class="hljs-built_in">sort</span>(id + <span class="hljs-number">1</span>, id + n + <span class="hljs-number">1</span>, cmp);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        num[id[i]] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> maxd = <span class="hljs-built_in">evaluate</span>();; maxd++) &#123;<span class="hljs-comment">//从预估翻转次数开始搜索</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, maxd)) &#123;<br>            cout &lt;&lt; maxd &lt;&lt; endl;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>省选</tag>
      
      <tag>OI</tag>
      
      <tag>搜索</tag>
      
      <tag>迭代加深搜索</tag>
      
      <tag>IDA*</tag>
      
      <tag>估价函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Latex 符号整理</title>
    <link href="/2023/08/20/Latex-Symbols/"/>
    <url>/2023/08/20/Latex-Symbols/</url>
    
    <content type="html"><![CDATA[<p><img src="https://bu.dusays.com/2023/08/20/64e221a938818.png" alt=""></p><p><img src="https://bu.dusays.com/2023/08/20/64e221aaebff2.png" alt=""></p><p><img src="https://bu.dusays.com/2023/08/20/64e221ac700a8.png" alt=""></p><p><img src="https://bu.dusays.com/2023/08/20/64e221ae5dbd2.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[NOI2015] 荷马史诗</title>
    <link href="/2023/08/16/NOI2015-%E8%8D%B7%E9%A9%AC%E5%8F%B2%E8%AF%97/"/>
    <url>/2023/08/16/NOI2015-%E8%8D%B7%E9%A9%AC%E5%8F%B2%E8%AF%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题目链接">题目链接</h2><p><a href="https://www.luogu.com.cn/problem/P2168">洛谷</a></p><p><a href="https://loj.ac/p/2132">LOJ</a></p><h2 id="题目分析">题目分析</h2><p>哈夫曼编码模板题。<br>使用 $ k $ 进制，即编码时将 $ k $ 个点合并为一个。</p><p>最后要求的就是哈夫曼编码的长度，以及哈夫曼树最深的节点的深度。</p><p>注意最后合并的时候可能会出现不满一层的情况，所以要在刚开始补成能恰好合并的哈夫曼树。<br>最后剩下一个节点，即需要合并掉 $ n-1 $ 个点，而每次合并减少 $ k-1 $ 个点，所以要想恰好合并，需要满足</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mtext> </mtext><mo lspace="0.22em" rspace="0.22em"><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow></mo><mtext> </mtext><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">(n-1) \bmod (k-1) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.0556em;"></span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><p>我们可以在合并之前就把权重为 0 的点加上凑数</p><h2 id="代码实现">代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">100010</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    ll w;<br>    ll depth;<br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> Node&amp; x) <span class="hljs-type">const</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (w != x.w) <span class="hljs-keyword">return</span> w &gt; x.w;<br>        <span class="hljs-keyword">return</span> depth &gt; x.depth;<br>    &#125;<br>&#125;;<br><br>priority_queue&lt;Node&gt; q;<br><span class="hljs-type">int</span> n, k;<br>ll sum, ans, len;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        ll ipt;<br>        cin &gt;&gt; ipt;<br>        q.<span class="hljs-built_in">push</span>(Node&#123;ipt, <span class="hljs-number">0</span>&#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> ((q.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) % (k - <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>) &#123; <br>        q.<span class="hljs-built_in">push</span>(Node&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>        ll sum = <span class="hljs-number">0</span>, maxd = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i++) &#123;<br>            maxd = <span class="hljs-built_in">max</span>(maxd, q.<span class="hljs-built_in">top</span>().depth);<br>            sum += q.<span class="hljs-built_in">top</span>().w;<br>            q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        ans += sum;<br>        q.<span class="hljs-built_in">push</span>(Node&#123;sum, maxd + <span class="hljs-number">1</span>&#125;);<br>    &#125;<br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    cout &lt;&lt; q.<span class="hljs-built_in">top</span>().depth &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>题解</tag>
      
      <tag>OI</tag>
      
      <tag>哈夫曼编码</tag>
      
      <tag>NOI</tag>
      
      <tag>贪心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汉印 MT810 没有 Linux 驱动的解决方案</title>
    <link href="/2023/07/07/HPRT-driver-linux/"/>
    <url>/2023/07/07/HPRT-driver-linux/</url>
    
    <content type="html"><![CDATA[<p><em><strong>本文可能已经过时</strong></em></p><hr><h2 id="问题背景">问题背景</h2><p>新买了一台汉印 MT810 打印机来打印题目，这台打印机可以用 USB 连接，但是需要装驱动。然而，MT810 没有 Linux 驱动，只有 Windows 和 MacOS 的。</p><h2 id="处理思路">处理思路</h2><p>官网有 MT800 的 Linux 驱动，猜测 800 系列的驱动应该差不多，尝试把 MT800 的 Linux 驱动和 MT810 的 MacOS 驱动“结合”一下。</p><h2 id="解决方法">解决方法</h2><h3 id="Step-1">Step 1</h3><p>下载 <a href="https://cn.hprt.com/prt/files/download_first/id/1076">MT800 的 Linux 驱动</a> 和 <a href="https://cn.hprt.com/prt/files/download_first/id/1277">MT810 的 MacOS 驱动</a></p><h3 id="Step-2">Step 2</h3><p>直接安装 MT800 驱动<br><img src="https://bu.dusays.com/2023/07/07/64a7bc38cdf39.png" alt="我这里已经装过了"></p><h3 id="Step-3">Step 3</h3><p>解压缩 MT810 MacOS 驱动，得到 <code>hprt-mt810-printer-mac-driver-v1.0.0.pkg</code>，解包得到 <code>usr</code> 和 <code>Library</code> 目录（我用的 easy7zip，用 wine 运行），在 <code>Library</code> 目录下找到 <code>MT810.ppd.gz</code>，解压缩，得到 <code>MT810.ppd</code>，这就是我们要的了。</p><h3 id="Step-4">Step 4</h3><p>执行如下命令（<code>&lt;&gt;</code> 里的自行替换）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> &lt;/path/to/MT810.ppd&gt; /usr/share/cups/model/label<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">cp</span> /usr/lib/cups/filter/raster-esc /usr/lib/cups/filter/raster-MT810<br></code></pre></td></tr></table></figure><h3 id="Step-5">Step 5</h3><p>添加打印机即可。</p><p><img src="https://bu.dusays.com/2023/07/07/64a7bf99853da.png" alt="结果图"></p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打印</tag>
      
      <tag>驱动</tag>
      
      <tag>linux</tag>
      
      <tag>deepin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deepin 20.8 开发环境配置</title>
    <link href="/2023/01/19/deepin-devenv/"/>
    <url>/2023/01/19/deepin-devenv/</url>
    
    <content type="html"><![CDATA[<h2 id="1、nodejs">1、nodejs</h2><p>系统自带的没啥用，卸掉就行。</p><p>官网下载，然后放在适当的位置，进行软链接即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s &lt;path-to-nodejs&gt;/bin/node /usr/local/bin<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s &lt;path-to-nodejs&gt;/bin/npm /usr/local/bin<br><span class="hljs-built_in">sudo</span> npm install -g cnpm --registry=https://registry.npm.taobao.org<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">ln</span> -s &lt;path-to-nodejs&gt;/bin/cnpm /usr/local/bin<br></code></pre></td></tr></table></figure><h2 id="2、llvm">2、llvm</h2><p>有时候我们需要用到较高版本的 clang（比如 vscode 的 clangd 插件要求 &gt;=14），那么我们就需要自己去装。</p><p>由于 deepin 20 基于 Debian 10，所以我们添加 llvm 给 Debian 10 的源比较合适。</p><p>打开 <code>/etc/apt/sources.list</code>，末尾加入以下内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb http://apt.llvm.org/buster/ llvm-toolchain-buster main<br>deb-src http://apt.llvm.org/buster/ llvm-toolchain-buster main<br><span class="hljs-comment"># 14 </span><br>deb http://apt.llvm.org/buster/ llvm-toolchain-buster-14 main<br>deb-src http://apt.llvm.org/buster/ llvm-toolchain-buster-14 main<br><span class="hljs-comment"># 15 </span><br>deb http://apt.llvm.org/buster/ llvm-toolchain-buster-15 main<br>deb-src http://apt.llvm.org/buster/ llvm-toolchain-buster-15 main<br></code></pre></td></tr></table></figure><p>然后添加公钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|<span class="hljs-built_in">sudo</span> apt-key add -<br><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure><p>接着就可以装 llvm15 了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install llvm-15 clang-15 clang-tools-15 clangd-15 clang-tidy-15 clang-format-15 lldb-15 lld-15<br></code></pre></td></tr></table></figure><h2 id="Python">Python</h2><p>!!! caution<br>注意不要动系统自带的 Python，不然可能会导致桌面环境崩溃</p><p>deepin 20 自带 Python 版本为 3.7.3，我安装的是 Python 3.10.12</p><p>先下载<a href="https://www.python.org/ftp/python/3.10.12/Python-3.10.12.tgz">源码</a></p><p>结合上一步，我使用了 clang-15 来编译 Python。</p><p>在解压后的目录执行以下内容</p><p>!!! note<br>&lt;path-to-openssl&gt; 需自行填写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./configure --prefix=/opt/Python-3.10.12 --enable-optimizations --with-openssl=&lt;path-to-openssl&gt; CC=/usr/bin/clang-15 CXX=/usr/bin/clang++-15 LLVM_PROFDATA=/usr/bin/llvm-profdata-15 CFLAGS=<span class="hljs-string">&quot;-Wno-unused-value -Wno-empty-body -Qunused-arguments -I/usr/local/include&quot;</span> LDFLAGS=<span class="hljs-string">&quot;-L/usr/local/lib&quot;</span> --enable-loadable-sqlite-extensions<br></code></pre></td></tr></table></figure><p>参数根据自己需要来调</p><p>然后就是熟悉的步骤了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> make<br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><h2 id="Manim">Manim</h2><p>先进入虚拟环境，然后 <code>pip install manim</code> 即可</p><p>!!! note<br>如果是用上面的方法编译安装的 Python，可能会报缺少 _bz2，原因是 bzip2 是 Python 编译的可选依赖，编译时没有带上</p><p>如果缺少 <code>_bz2</code>，执行 <code>sudo apt install libbz2-dev</code> 然后重新编译安装 Python</p><h2 id="lua-5-4">lua 5.4</h2><p>deepin 20 源里面没有 lua 5.4，想要使用需要手动编译</p><p>首先下载 lua 5.4 <a href="http://www.lua.org/download.html">源代码</a>，解压之后 cd 到解压目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make all <span class="hljs-built_in">test</span><br><span class="hljs-built_in">sudo</span> make install<br></code></pre></td></tr></table></figure><h2 id="CUDA">CUDA</h2><p>同样借用 Debian 10 的。</p><p>点击 <a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=Debian&amp;target_version=10&amp;target_type=runfile_local">这个链接</a></p><p>按照下方指示即可</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>deepin</tag>
      
      <tag>nodejs</tag>
      
      <tag>llvm</tag>
      
      <tag>clang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>deepin 下 vscode c++ 环境配置</title>
    <link href="/2023/01/19/deepin-vscode-dev/"/>
    <url>/2023/01/19/deepin-vscode-dev/</url>
    
    <content type="html"><![CDATA[<p>个人偏爱使用 clang + xmake，以下内容均针对这一配置</p><p>首先配置 clang 环境，deepin 20 源里 clang 版本过低的解决方案见<a href="https://hghgthifg.github.io/2023/01/19/deepin-devenv/">这里</a></p><p>接下来安装插件：</p><ul><li><code>clangd</code>（提供代码补全，格式化等功能）</li><li><code>CodeLLDB</code>（调试）</li><li><code>Project Manager</code>（管理项目）</li><li><code>XMake</code> (xmake 的 vscode 插件)</li></ul><p>!!! info<br><a href="https://xmake.io/">xmake</a> 是一个很好用的构建工具，用 lua 描述配置，语法简单，功能强大，帮你远离 cmake 的折磨。</p><p>官网提供的安装方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash &lt;(wget https://xmake.io/shget.text -O -)<br></code></pre></td></tr></table></figure><p>最后把 vscode 的插件配置一下就行了。<br>在设置中搜索：</p><p><code>Xmake: Debug Config Type</code> 改为 <code>codelldb</code><br><code>Clangd: Path</code> 改为 <code>clangd-15</code></p><p>在 vscode 的 <code>settings.json</code> 中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;clangd.arguments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;--background-index&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;--compile-commands-dir=.&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;-j=12&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;--query-driver=/usr/bin/clang++-15&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;--clang-tidy&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;--clang-tidy-checks=performance-*,bugprone-*&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;--all-scopes-completion&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;--completion-style=detailed&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;--header-insertion=iwyu&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;--pch-storage=disk&quot;</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;clangd.path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clangd-15&quot;</span><br></code></pre></td></tr></table></figure><p>具体参数请见<a href="https://clangd.llvm.org/config">官网</a></p><p>可使用 <code>xmake create &lt;project-name&gt;</code> 创建项目，然后用 vscode 打开。效果如下：</p><p><img src="https://bu.dusays.com/2023/01/19/63c8e55f82b16.png" alt="主题：ayu"></p><p>完结撒花~</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>linux</tag>
      
      <tag>deepin</tag>
      
      <tag>llvm</tag>
      
      <tag>clang</tag>
      
      <tag>vscode</tag>
      
      <tag>xmake</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>带风字的诗词</title>
    <link href="/2022/07/10/%E5%B8%A6%E9%A3%8E%E5%AD%97%E7%9A%84%E8%AF%97%E8%AF%8D/"/>
    <url>/2022/07/10/%E5%B8%A6%E9%A3%8E%E5%AD%97%E7%9A%84%E8%AF%97%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<p>整理了一些带「风」字的诗词句</p><span id="more"></span><p>随风潜入夜，润物细无声 ——杜牧《春夜喜雨》</p><p>不论平地与山尖，无限风光尽被占 ——罗隐《蜂》</p><p>北风卷地白草折，胡天八月即飞雪 ——曾参《白雪歌送武判官归京》</p><p>纷纷暮雪下辕门，风掣红旗冻不翻 ——曾参《白雪歌送武判官归京》</p><p>菡萏香销翠叶残，西风愁起绿波间 ——李璟《摊破浣溪沙》</p><p>羌笛何须怨杨柳，春风不度玉门关 ——王之涣《凉州词二首》</p><p>身向云山那畔行，北风吹断马嘶声 ——纳兰性德《浣溪沙》</p><p>九州生气恃风雷，万马齐喑究可哀 ——龚自珍《己亥杂诗》</p><p>千磨万击还坚劲，任尔东西南北风 ——郑燮《竹石》</p><p>倚东风，豪兴徜徉 ——秦观《行香子》</p><p>江南好，风景旧曾谙 ——白居易《忆江南》</p><p>大江东去，浪淘尽，千古风流人物 ——苏轼《念奴娇·赤壁怀古》</p><p>人面不知何处去，桃花依旧笑春风 ——崔护《题都城南庄》</p><p>东风不与周郎便，铜雀春深锁二乔 ——杜牧《赤壁》</p><p>大风起兮云飞扬，威加海内兮归故乡 ——刘邦《大风歌》</p><p>舞榭歌台，风流总被，雨打风吹去 ——辛弃疾《永遇乐·京口北固亭怀古》</p><p>风萧萧兮易水寒，壮士一去兮不复返 ——荆轲《易水歌》</p><p>四面歌残终破楚，八年风味徒思浙 ——秋瑾《满江红·小住京华》</p><p>沾衣欲湿杏花雨，吹面不寒杨柳风 ——志南《绝句》</p><p>八月秋高风怒号，卷我屋上三重茅 ——杜甫《茅屋为秋风所破歌》</p><p>俄顷风定云墨色，秋天漠漠向昏黑 ——杜甫《茅屋为秋风所破歌》</p><p>风雨不动安如山 ——杜甫《茅屋为秋风所破歌》</p><p>卷地风来忽吹散，望湖楼下水如天 ——苏轼《六月二十七日望湖楼醉书》</p><p>风急天高袁啸哀，渚清沙白鸟飞回 ——杜甫《登高》</p><p>大鹏一日同风起，扶摇直上九万里 ——李白《上李邕》</p><p>亭亭山上松，瑟瑟谷中风 ——刘桢《赠从弟》</p><p>风声一何盛，松枝一何劲 ——刘桢《赠从弟》</p><p>风鸣两岸叶，月照一孤舟 ——孟浩然《宿桐庐江寄广陵旧游》</p><p>潮平两岸阔，风正一帆悬 ——王湾《次北固山下》</p><p>便纵有千种风情，更与何人说 ——柳永《雨霖铃·寒蝉凄切》</p><p>枯藤老树昏鸦，小桥流水人家，古道西风瘦马 ——马致远《天净沙·秋思》</p><p>君看一叶舟，出没风波里 ——范仲淹《江上渔者》</p><p>杨柳岸，晓风残月 ——柳永《雨霖铃》</p><p>暖风熏得游人醉，直把杭州作汴州 ——林升《题临安邸》</p><p>千里黄云白日曛，北风吹雁雪纷纷 ——高适《别董大》</p><p>相见时难别亦难，东风无力百花残 ——李商隐《无题》</p><p>青箬笠，绿蓑衣，斜风细雨不须归 ——张志和《渔歌子》</p><p>长风破浪会有时，直挂云帆济沧海 ——李白《行路难》</p><p>春风十里扬州路，卷上珠帘总不如 ——杜牧《赠别》</p><p>春风得意马蹄疾，一日看尽长安花 ——孟郊《登科后》</p><p>小楼昨夜又东风，故国不堪回首月明中 ——李煜《虞美人》</p><p>黄师塔前江水东，春光懒困倚微风 ——杜甫《江畔独步寻花》</p><p>千里莺啼绿映红，水村山郭酒旗风 ——杜牧《江南春》</p><p>爆竹声中一岁除，春风送暖入屠苏 ——王安石《元日》</p><p>林暗草惊风，将军夜引弓 ——卢纶《和张仆射塞下曲》</p><p>云淡风轻近午天，傍花随柳过前川 ——程颢《春日偶成》</p><p>迟日江山丽，春风花草香 ——杜甫《绝句》</p><p>俱往矣，数风流人物，还看今朝 ——毛泽东《沁园春·雪》</p><p>昨夜雨疏风骤，浓睡不消残酒 ——李清照《如梦令》</p><p>洞庭青草，近中秋，更无一点风色 ——张孝祥《念奴娇》</p>]]></content>
    
    
    <categories>
      
      <category>整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诗词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>带花字的诗</title>
    <link href="/2022/06/26/%E5%B8%A6%E8%8A%B1%E5%AD%97%E7%9A%84%E8%AF%97%E8%AF%8D/"/>
    <url>/2022/06/26/%E5%B8%A6%E8%8A%B1%E5%AD%97%E7%9A%84%E8%AF%97%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<p>整理了一些带「花」字的诗词句</p><span id="more"></span><p>春城无处不飞花，寒食东风日柳斜 ——韩翃《寒食》</p><p>江流宛转绕芳甸，月照花林皆似霰 ——张若虚《春江花月夜》</p><p>有桃花红，李花白，菜花黄 ——秦观《行香子·书绕村庄》</p><p>夜来风雨声，花落知多少 ——孟浩然《春晓》</p><p>人间四月芳菲尽，山寺桃花始盛开 ——白居易《大林寺桃花》</p><p>西塞山前白鹭飞，桃花流水鳜鱼肥 ——张志和《渔歌子》</p><p>晓看红湿处，花重锦官城 ——杜甫《春夜喜雨》</p><p>林花谢了春红，太匆匆 ——李煜《相见欢》</p><p>待到秋来九月八，我花开后百花杀 ——黄巢《不第后赋菊》</p><p>细看来，不是杨花，点点是离人泪 ——苏轼《水龙吟·次韵章质夫杨花词》</p><p>春花秋月何时了，往事知多少 ——李煜《虞美人》</p><p>正是江南好风景，落花时节又逢君 ——杜甫《江南逢李龟年》</p><p>昨夜闲潭梦落花，可怜春半不还家 ——张若虚《春江花月夜》</p><p>忽如一夜春风来，千树万树梨花开 ——岑参《白雪歌送武判官归京》</p><p>杨花落尽子规啼，闻道龙标过五溪 ——李白《闻王昌龄左迁龙标遥有此寄》</p><p>沾衣欲湿杏花雨，吹面不寒杨柳风 ——志南《绝句》</p><p>待到山花烂漫时，她在丛中笑 ——毛泽东《卜算子·咏梅》</p><p>桃花潭水深千尺，不及汪伦送我情 ——李白《赠汪伦》</p><p>已是悬崖百丈冰，犹有花枝俏 ——毛泽东《卜算子·咏梅》</p><p>采得百花成蜜后，为谁辛苦为谁甜 ——罗隐《蜂》</p><p>花间一壶酒，独酌无相亲 ——李白《月下独酌四首·其一》</p><p>当窗理云鬓，对镜贴花黄 ——《木兰辞》</p><p>停车坐爱枫林晚，霜叶红于二月花 ——杜牧《山行》</p><p>茅檐长扫静无苔，花木成畦手自栽 ——王安石《书湖阴先生壁》</p><p>兴尽晚回舟，误入藕花深处 ——李清照《如梦令》</p><p>花谢花飞花满天，红消香断有谁怜 ——曹雪芹《葬花吟》</p><p>一朝春尽红颜老，花落人亡两不知 ——曹雪芹《葬花吟》</p><p>落红不是无情物，化作春泥更护花 ——龚自珍《己亥杂诗》</p><p>杨花榆荚无才思，唯解漫天作雪飞 ——韩愈《晚春二首》</p><p>接天莲叶无穷碧，映日荷花别样红 ——杨万里《晓出净慈寺送林子方》</p><p>吾家洗砚池头树，个个花开淡墨痕 ——王冕《墨梅》</p><p>亭台六七座，八九十枝花 ——徐再思《无题》</p><p>乱花渐欲迷人眼，浅草才能没马蹄 ——白居易《钱塘湖春行》</p><p>待到重阳日，还来就菊花 ——孟浩然《过故人庄》</p><p>日出江花红胜火，春来江水绿如蓝 ——白居易《忆江南》</p><p>竹外桃花三两枝，春江水暖鸭先知 ——苏轼《惠崇春江晓景》</p><p>洛阳城东桃李花，飞来飞去落谁家 ——刘希夷《代悲白头翁》</p><p>今年花落颜色改，明年花开复谁在 ——刘希夷《代悲白头翁》</p><p>洛阳女儿惜颜色，坐见落花长叹息 ——刘希夷《代悲白头翁》</p><p>年年岁岁花相似，岁岁年年人不同 ——刘希夷《代悲白头翁》</p><p>公子王孙芳树下，清歌妙舞落花前 ——刘希夷《代悲白头翁》</p><p>桃花一簇开无主，可爱深红爱浅红 ——杜甫《江畔独步寻花》</p><p>去年今日此门中，人面桃花相映红 ——崔护《题都城南庄》</p><p>人面不知何处去，桃花依旧笑春风 ——崔护《题都城南庄》</p><p>商女不知亡国恨，隔江犹唱后庭花 ——杜牧《泊秦淮》</p><p>有约不来过夜半，闲敲棋子落灯花 ——赵师秀《约客》</p><p>东风夜放花千树，更吹落，星如雨 ——辛弃疾《青玉案·元夕》</p><p>欲买桂花同载酒，终不似，少年游 ——刘过《唐多令》</p><p>杏花疏影里，吹笛到天明 ——陈与义《临江仙·夜登小阁忆洛中旧游》</p><p>故人西辞黄鹤楼，烟花三月下扬州 ——李白《黄鹤楼送孟浩然之广陵》</p>]]></content>
    
    
    <categories>
      
      <category>整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>诗词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP2021 游记</title>
    <link href="/2021/10/23/CSP2021/"/>
    <url>/2021/10/23/CSP2021/</url>
    
    <content type="html"><![CDATA[<p>CSP 第二年摸鱼记</p><span id="more"></span><h2 id="初赛">初赛</h2><p>太有意思了！！！！！！！！</p><p>acos 0.5</p><p>abcdfg，hjmw</p><p>手算base64</p><p>HelloWorld-&gt;Helloworld</p><p>0xff</p><p>我有r，哎，我不用，就是玩儿</p><p>四毛子树</p><p>真是太有意思了！！！！！！</p><hr><p>上午试卷先拿到第二张，结果一眼看到试卷上全是代码，一看题目描述啥都看不懂，我人直接傻了</p><p>做选择题，感觉还好，一到阅读程序……acos是啥？</p><p>两个solve打了半天草稿，看出了点规律，废了两张草稿纸……</p><p>base64，看到题目1e9-7秒就知道了是这玩意儿，然而没了解过具体实现，手算……我裂开来了</p><p>SGVsbG93b3JsZA==对应HelloWorld我觉得很合理啊，于是想都不想判了对，结果是Helloworld……</p><p>藏了换行符就离谱</p><p>然后就是恐怖的四毛子树了……字母都认识，连起来就都不懂了啊啊啊啊啊啊</p><p>不过运气很好，蒙对了一半嘿嘿嘿</p><p>下午j组，阴魂不散的base64又来了……</p><p>做到选择题第二题，算出了个c，天真的我以为肯定是选csp，结果被阴了/(ㄒoㄒ)/~~</p><p>阅读程序第三题，我竟然读不懂，这就是普及组吗……</p><h2 id="复赛">复赛</h2><p>只过了普及组，提高组没过（悲伤）。</p><p>暑假就不该摸鱼的，导致我今年比去年还弱。</p><p>请假去比赛，作业不知道啥时候能写完……</p><p>这么冷的天竟然还有蚊子，吵得我睡不着。</p><p>来到南航，进门之后远远地看见了一幢高楼，想不到要爬楼梯上去，累死我了。</p><hr><p>第一题似乎挺水的，解决掉了之后看第二题。</p><p>想了20min，不会做，放弃了，搞了个贪心就去看第三题了。</p><p>第三题貌似不难，<code>OK</code> 和 <code>FAIL</code> 用 <code>map</code> 判断就行，主要是 <code>ERR</code> 的判断，数据全是坑。</p><p>大样例的数据千奇百怪，有连续两个 . 的，有多一个少一个的，最恶心的是那个爆了 <code>int</code> 的，谁能想到 ip 地址会有爆 <code>int</code> 的……</p><p><s>不过我揪出来了</s></p><p>这个大样例让我很慌，因为真实数据很可能比大样例还坑。</p><p>1000个数据的比对挺麻烦，这次没给 Linux 虚拟机，没法 <code>diff</code> ，Windows 下不知道有没有这样的工具，就算有我也不会用（擦汗）</p><p>不过幸好有 vscode，虽然就一个 <code>C++</code> 插件，但用来看数据还是挺方便的（自动重载文件真好用）</p><p>最后用 <code>Ctrl + F</code> 来比对文件，算是踩过了坑。</p><p>第四题我想着用链表，可惜不知道哪个小地方出了问题，连样例都过不去，估计是要<strong>爆零</strong>了。</p><p>第四题花了太长时间，导致没时间做第二题了，最后发现我把没法过样例的交了上去……</p><p>于是 <strong>爆零*2</strong></p><p>期望得分 200 左右，<strong>一年比一年弱</strong>，差不多该退役了</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 c_str()</title>
    <link href="/2021/07/20/about-c-str/"/>
    <url>/2021/07/20/about-c-str/</url>
    
    <content type="html"><![CDATA[<p>关于c_str()的用法</p><span id="more"></span><h2 id="引入">引入</h2><p>首先来看一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sstream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-function">std::string <span class="hljs-title">readFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path)</span></span><br><span class="hljs-function"></span>&#123;<br>    std::string str;<br>    std::ifstream file;<br>    std::stringstream stream;<br>    file.<span class="hljs-built_in">exceptions</span>(std::ifstream::failbit | std::ifstream::badbit);<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        file.<span class="hljs-built_in">open</span>(path);<br>        stream &lt;&lt; file.<span class="hljs-built_in">rdbuf</span>();<br>        str = stream.<span class="hljs-built_in">str</span>();<br>        file.<span class="hljs-built_in">close</span>();<br>    &#125;<br>    <span class="hljs-built_in">catch</span> (<span class="hljs-type">const</span> std::exception &amp;e)<br>    &#123;<br>        std::cerr &lt;&lt; e.<span class="hljs-built_in">what</span>() &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *c = <span class="hljs-built_in">readFile</span>(<span class="hljs-string">&quot;a.txt&quot;</span>).<span class="hljs-built_in">c_str</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, c);<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *d = <span class="hljs-built_in">readFile</span>(<span class="hljs-string">&quot;b.txt&quot;</span>).<span class="hljs-built_in">c_str</span>();<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>a.txt:</p><figure class="highlight text"><figcaption><span>a.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Every dog has it&#x27;s day.<br></code></pre></td></tr></table></figure><p>b.txt:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">It never rains but it pours.<br></code></pre></td></tr></table></figure><p>期待的结果自然是两遍 <code>a.txt</code> 中的内容，而当打开 <code>output.txt</code> 时，奇怪的事情发生了：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Every dog has it&#x27;s day.<br>It never rains but it pours.<br></code></pre></td></tr></table></figure><h2 id="分析">分析</h2><p>在 <code>c_str()</code> 定义的注释中可以找到这样一句警告：</p><p>!!! warning<br>Do not modify or dire things may happen.</p><p>发生上面问题的原因在于 <code>c_str()</code> 返回的只是一个临时的指针，下一次操作正好用了相同的地址，使得内容发生了改变。</p><h2 id="解决">解决</h2><p>将字符串复制出来即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;output.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>    std::string tmp;<br>    tmp = <span class="hljs-built_in">readFile</span>(<span class="hljs-string">&quot;a.txt&quot;</span>);<br>    <span class="hljs-type">char</span> *c = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[tmp.<span class="hljs-built_in">length</span>()];<br>    <span class="hljs-built_in">strcpy</span>(c, tmp.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, c);<br>    tmp = <span class="hljs-built_in">readFile</span>(<span class="hljs-string">&quot;b.txt&quot;</span>);<br>    <span class="hljs-type">char</span> *d = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[tmp.<span class="hljs-built_in">length</span>()];<br>    <span class="hljs-built_in">strcpy</span>(d, tmp.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, c);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Every dog has it&#x27;s day.<br>Every dog has it&#x27;s day.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
      <tag>string</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP2020 游记</title>
    <link href="/2020/10/24/CSP2020/"/>
    <url>/2020/10/24/CSP2020/</url>
    
    <content type="html"><![CDATA[<h2 id="初赛">初赛</h2><p>选择题难度和往年差别不大，做到阅读程序的时候当场爆炸。</p><p>第一题大概是个加解密，因为表列错了搞了好久……</p><p>第二题是个模拟k进制运算。</p><p>第三题给我看懵了，于是瞎写了几个选项。</p><p>完善程序简单多了，第一题还是做错了一个空，我也不知道我怎么会选了<code>if(n%i==0)</code>。（后悔中）</p><p>最终弄到了76分，勉强踩线过了初赛</p><h2 id="复赛">复赛</h2><p>出发喽！！！</p><p>高铁是真的快（时速300多千米），一个小时就到了南航</p><p><img src="https://bu.dusays.com/2023/08/29/64edef4010ecb.jpg" alt="路上的风景"></p><p><img src="https://bu.dusays.com/2023/08/29/64edef445c612.jpg" alt="路上的风景"></p><p><img src="https://bu.dusays.com/2023/08/29/64edef5a68801.jpg" alt="路上的风景"></p><p>晚上又在洛谷做了几题，11点就睡了</p><p><img src="https://bu.dusays.com/2023/08/29/64edef45f3e15.jpg" alt="晚上"></p><p>大学真的是“大”学（还被高速公路穿过）</p><p>赛场在高速公路另一边，走得累死我了QAQ</p><hr><p>先开的第一题，一看这什么玩意儿啊，看不懂，于是就放那了</p><p>然后看了第四题，想到似乎做过类似的题，打了个暴力DFS，结果写炸了233</p><p>继续看第一题，我恍然大悟（差点没做出来233）</p><p>再看第四题，改了改，暴力是打出来了，但第三个样例输进去动都不动</p><p>开了第二题，想了亿会，用了个600n的桶</p><p><s>还是看第四题</s>，觉得是dp，于是想了半天状态转移方程，太菜了找不出来，于是打了个记忆化，样例总算是过了</p><p>第三题给我看懵了，做了半天样例都过不了，自闭了QAQ~~（于是直接输出1）~~</p><hr><p>比赛后问了问大佬，感觉慌的一批</p><p>回到家后测了民间数据，前两题都对，第三题0分~~（能对就怪了）~~，第四题错了几个，超时一堆QAQ</p><p>第二天测了洛谷的数据，第四题只对了3个点（大悲）</p><p>不知道200多1=有没有希望QAQ</p><hr><p>最终得分：100+100+0+20</p><p>结果还是不错的，踩着线弄到了一等，下次提高组加油！</p>]]></content>
    
    
    <categories>
      
      <category>游记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OI</tag>
      
      <tag>CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
